/* The following code was generated by JFlex 1.4.3 on 08/06/15 17:50 */

package lexico;

import java_cup.runtime.*;

//import static lexico.Simbolos.java


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08/06/15 17:50 from the specification file
 * <tt>lexer.flex</tt>
 */
public class Analizador implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\0\1\5\1\3\22\0\1\5\1\13\1\24"+
    "\1\0\1\0\1\14\1\16\1\25\1\67\1\70\1\32\1\10\1\30"+
    "\1\17\1\6\1\35\1\2\11\2\1\26\1\73\1\34\1\31\1\33"+
    "\1\27\1\0\3\1\1\12\1\36\1\11\10\1\1\40\2\1\1\37"+
    "\1\64\7\1\1\22\1\66\1\23\1\15\1\0\1\0\1\51\1\43"+
    "\1\46\1\54\1\7\1\56\1\63\1\61\1\45\1\1\1\74\1\44"+
    "\1\65\1\57\1\53\1\41\1\1\1\47\1\55\1\52\1\42\1\50"+
    "\1\76\1\75\1\60\1\62\1\71\1\20\1\72\1\21\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\16\2\1\31\1\32\1\33\1\34\1\35"+
    "\1\2\1\36\2\37\1\40\1\36\1\1\2\0\1\41"+
    "\1\42\3\2\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\0\1\4\7\2\1\65"+
    "\14\2\1\66\16\2\2\36\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\2\0\3\2\1\100"+
    "\1\101\1\102\2\0\10\2\1\103\14\2\1\104\14\2"+
    "\1\105\1\106\4\2\2\36\1\107\1\110\1\2\1\111"+
    "\3\0\1\4\1\0\6\2\1\112\1\113\6\2\1\114"+
    "\1\2\1\115\1\2\1\116\1\2\1\117\1\2\1\120"+
    "\13\2\1\121\3\2\2\36\1\2\2\0\4\2\1\122"+
    "\5\2\1\123\1\124\4\2\1\125\2\2\1\126\2\2"+
    "\1\127\1\2\1\130\1\131\1\132\2\2\1\133\1\2"+
    "\1\0\1\134\7\2\1\135\1\2\1\136\3\2\1\137"+
    "\1\140\1\2\1\141\1\2\1\142\1\143\1\144\1\0"+
    "\1\145\1\2\1\146\1\147\6\2\1\150\1\2\1\151"+
    "\4\2\1\152\1\153\2\2\1\154\1\155\2\2\1\156"+
    "\1\2\1\157\1\160\2\2\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\275"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\275\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u07e0\0\u081f\0\u085e\0\275\0\275\0\275\0\275\0\275"+
    "\0\u089d\0\u08dc\0\u091b\0\275\0\275\0\u095a\0\u0999\0\u09d8"+
    "\0\u0a17\0\275\0\275\0\u0a56\0\u0a95\0\u0ad4\0\275\0\275"+
    "\0\275\0\275\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\275\0\275\0\275\0\275\0\u0b13\0\275\0\u0b52\0\275"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\374\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\275"+
    "\0\275\0\275\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\275\0\u1626\0\275"+
    "\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\374"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\374\0\374\0\u1f02\0\u1f41"+
    "\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\374\0\374\0\u207c\0\275"+
    "\0\u20bb\0\u20fa\0\u2139\0\u20fa\0\u2178\0\u21b7\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\374\0\374\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\374\0\u24ab\0\374\0\u24ea\0\374"+
    "\0\u2529\0\374\0\u2568\0\374\0\u25a7\0\u25e6\0\u2625\0\u2664"+
    "\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\374"+
    "\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15"+
    "\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\374\0\u2b50\0\u2b8f\0\u2bce"+
    "\0\u2c0d\0\u2c4c\0\374\0\374\0\u2c8b\0\u2cca\0\u2d09\0\u2d48"+
    "\0\374\0\u2d87\0\u2dc6\0\374\0\u2e05\0\u2e44\0\374\0\u2e83"+
    "\0\374\0\u2ec2\0\374\0\u2f01\0\u2f40\0\374\0\u2f7f\0\u2fbe"+
    "\0\374\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177"+
    "\0\374\0\u31b6\0\374\0\u31f5\0\u3234\0\u3273\0\374\0\374"+
    "\0\u32b2\0\374\0\u32f1\0\374\0\374\0\374\0\u3330\0\374"+
    "\0\u336f\0\374\0\374\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa"+
    "\0\u34e9\0\374\0\u3528\0\374\0\u3567\0\u35a6\0\u35e5\0\u3624"+
    "\0\374\0\374\0\u3663\0\u36a2\0\374\0\374\0\u36e1\0\u3720"+
    "\0\374\0\u375f\0\374\0\374\0\u379e\0\u37dd\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13"+
    "\2\5\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\4\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\3\5\1\36\1\5\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\5"+
    "\1\47\1\50\1\51\1\52\4\5\1\53\1\5\1\4"+
    "\1\54\1\55\1\56\1\57\1\60\2\5\1\61\3\62"+
    "\1\63\1\64\17\62\1\65\10\62\1\66\30\62\1\67"+
    "\10\62\3\4\1\7\2\10\2\4\1\13\2\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\4\4\1\26"+
    "\1\27\1\4\1\31\1\32\1\33\1\34\1\35\41\4"+
    "\100\0\2\5\4\0\1\5\1\0\2\5\23\0\30\5"+
    "\6\0\3\5\2\0\1\6\3\0\1\70\1\71\1\0"+
    "\1\72\1\73\23\0\1\71\15\0\1\73\1\0\1\72"+
    "\24\0\1\10\74\0\1\70\75\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\6\5\1\74\12\5\1\75\6\5"+
    "\6\0\1\5\1\76\1\5\10\0\1\77\20\0\1\100"+
    "\76\0\1\101\76\0\1\102\76\0\1\103\63\0\1\104"+
    "\12\0\1\105\64\0\1\106\11\0\1\107\65\0\1\110"+
    "\10\0\1\111\76\0\1\112\76\0\1\113\76\0\1\114"+
    "\1\0\1\115\74\0\1\116\2\0\1\117\73\0\1\120"+
    "\1\121\2\0\1\122\42\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\4\5\1\123\4\5\1\124\1\5\1\125"+
    "\14\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\11\5\1\126\3\5\1\127\4\5\1\130"+
    "\5\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\15\5\1\131\12\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\20\5\1\132"+
    "\1\133\5\5\1\134\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\6\5\1\135\4\5\1\136"+
    "\1\5\1\137\5\5\1\140\4\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\141\1\0\2\5\23\0\30\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\15\5\1\142\12\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\5\5\1\143\22\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\11\5\1\144\11\5\1\145\4\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\146\1\0\2\5\23\0\15\5\1\147"+
    "\12\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\4\5\1\150\7\5\1\151\5\5\1\152"+
    "\1\153\4\5\6\0\2\5\1\154\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\6\5\1\155\1\156\3\5"+
    "\1\157\1\5\1\160\12\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\161\1\0\2\5\23\0\4\5\1\162\6\5"+
    "\1\163\14\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\14\5\1\164\13\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\23\5"+
    "\1\165\4\5\6\0\3\5\3\62\2\0\17\62\1\0"+
    "\41\62\1\0\10\62\4\0\1\64\72\0\3\62\2\0"+
    "\17\62\1\0\5\62\1\166\2\62\1\167\30\62\1\0"+
    "\10\62\4\170\1\0\17\170\1\171\1\172\15\170\1\173"+
    "\3\170\1\174\2\170\1\175\3\170\1\176\1\177\6\170"+
    "\1\200\10\170\2\0\1\70\4\0\1\71\1\0\1\72"+
    "\1\73\23\0\1\71\15\0\1\73\1\0\1\72\22\0"+
    "\1\201\5\0\1\202\6\0\1\202\60\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\17\5\1\203\10\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\4\5\1\204\23\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\14\5\1\205\13\5\6\0"+
    "\3\5\31\0\1\206\1\0\1\207\74\0\1\210\45\0"+
    "\32\211\1\212\44\211\3\122\1\7\1\10\72\122\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\5\5\1\213"+
    "\22\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\7\5\1\214\5\5\1\215\12\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\10\5\1\216\17\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\217\1\0\2\5\23\0\30\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\15\5\1\220"+
    "\12\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\14\5\1\221\13\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\21\5\1\222"+
    "\6\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\14\5\1\223\2\5\1\224\10\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\3\5\1\225\24\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\13\5\1\226\14\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\14\5\1\227\2\5\1\230\10\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\21\5\1\231"+
    "\6\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\13\5\1\232\14\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\14\5\1\233"+
    "\13\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\7\5\1\234\20\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\17\5\1\235"+
    "\10\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\4\5\1\236\6\5\1\237\6\5\1\240"+
    "\5\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\7\5\1\241\1\5\1\242\16\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\20\5\1\243\7\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\4\5\1\244\23\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\3\5\1\245\24\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\13\5\1\246\14\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\21\5\1\247\6\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\15\5\1\250\12\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\7\5\1\251\20\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\15\5\1\252\12\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\21\5\1\253\6\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\6\5\1\254\21\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\11\5\1\255\16\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\30\5\6\0\2\5\1\256"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\6\5"+
    "\1\257\21\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\14\5\1\260\13\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\11\5"+
    "\1\261\16\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\7\5\1\262\20\5\6\0\3\5"+
    "\3\263\2\211\17\263\1\211\5\263\1\264\33\263\1\211"+
    "\10\263\3\167\1\7\1\10\17\167\1\122\41\167\1\122"+
    "\10\167\2\0\1\201\6\0\1\72\1\73\41\0\1\73"+
    "\1\0\1\72\22\0\1\201\75\0\2\5\4\0\1\265"+
    "\1\0\2\5\23\0\30\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\27\5\1\266\6\0"+
    "\3\5\1\0\2\5\4\0\1\267\1\0\2\5\23\0"+
    "\30\5\6\0\3\5\31\0\1\270\45\0\32\211\1\271"+
    "\44\211\32\272\1\273\2\272\1\274\1\275\40\272\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\6\5\1\276"+
    "\21\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\12\5\1\277\15\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\14\5\1\300"+
    "\13\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\30\5\6\0\1\301\2\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\13\5\1\302\14\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\6\5\1\303\21\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\304\1\0\2\5\23\0\30\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\25\5"+
    "\1\305\2\5\6\0\3\5\1\0\2\5\4\0\1\306"+
    "\1\0\2\5\23\0\30\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\14\5\1\307\13\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\6\5\1\310\6\5\1\311\12\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\17\5"+
    "\1\312\10\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\10\5\1\313\17\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\314\1\0\2\5\23\0\30\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\14\5\1\315\13\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\11\5\1\316\16\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\4\5\1\317\23\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\16\5\1\320\11\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\14\5\1\321\13\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\322\1\0\2\5\23\0\30\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\21\5"+
    "\1\323\6\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\17\5\1\324\10\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\15\5"+
    "\1\325\12\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\13\5\1\326\14\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\5\5"+
    "\1\327\22\5\6\0\3\5\1\0\2\5\4\0\1\330"+
    "\1\0\2\5\23\0\30\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\14\5\1\331\13\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\10\5\1\332\17\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\11\5\1\333\16\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\14\5\1\334\13\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\13\5\1\335\14\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\13\5\1\336\14\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\17\5\1\337\10\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\6\5\1\340\21\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\7\5\1\341\20\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\7\5\1\342\20\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\6\5\1\343\21\5"+
    "\6\0\3\5\3\263\2\211\17\263\1\211\5\263\1\344"+
    "\33\263\1\211\10\263\3\264\2\272\17\264\1\272\5\264"+
    "\1\345\33\264\1\272\10\264\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\21\5\1\346\6\5\6\0\3\5"+
    "\32\211\1\271\2\211\1\10\41\211\32\272\1\347\3\272"+
    "\1\275\72\272\1\273\2\272\1\10\73\272\1\347\3\272"+
    "\1\275\1\350\37\272\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\7\5\1\351\20\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\13\5\1\352"+
    "\14\5\6\0\3\5\1\0\2\5\4\0\1\353\1\0"+
    "\2\5\23\0\30\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\13\5\1\354\14\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\30\5\6\0\1\355\2\5\1\0\2\5\4\0\1\356"+
    "\1\0\2\5\23\0\30\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\11\5\1\357\16\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\13\5\1\360\14\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\361\1\0\2\5\23\0\30\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\11\5"+
    "\1\362\16\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\17\5\1\363\10\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\23\5"+
    "\1\364\4\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\7\5\1\365\20\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\11\5"+
    "\1\366\16\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\11\5\1\367\16\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\17\5"+
    "\1\370\10\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\30\5\6\0\2\5\1\371\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\4\5\1\372"+
    "\23\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\6\5\1\373\21\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\11\5\1\374"+
    "\16\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\7\5\1\375\20\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\23\5\1\376"+
    "\4\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\14\5\1\377\13\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\10\5\1\u0100"+
    "\17\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\14\5\1\u0101\13\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\6\5\1\u0102"+
    "\21\5\6\0\3\5\1\0\2\5\4\0\1\u0103\1\0"+
    "\2\5\23\0\30\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\12\5\1\u0104\15\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\21\5\1\u0105\6\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\u0106\1\0\2\5\23\0\30\5\6\0\3\5\3\263"+
    "\2\211\17\263\1\211\5\263\1\344\2\263\1\62\30\263"+
    "\1\211\10\263\3\264\2\272\17\264\1\272\5\264\1\345"+
    "\2\264\1\62\30\264\1\272\10\264\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\16\5\1\u0107\11\5\6\0"+
    "\3\5\32\272\1\347\2\272\1\0\73\272\1\347\3\272"+
    "\1\275\1\u0108\37\272\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\10\5\1\u0109\17\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\14\5\1\u010a"+
    "\13\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\10\5\1\u010b\17\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\25\5\1\u010c"+
    "\2\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\13\5\1\u010d\14\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\20\5\1\u010e"+
    "\7\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\21\5\1\u010f\6\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\27\5\1\u0110"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\14\5\1\u0111\13\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\21\5\1\u0112\6\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\21\5\1\u0113\6\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\13\5\1\u0114\14\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\7\5\1\u0115\20\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\6\5\1\u0116\21\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\u0117\1\0\2\5"+
    "\23\0\30\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\10\5\1\u0118\17\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\11\5"+
    "\1\u0119\16\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\23\5\1\u011a\4\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\6\5"+
    "\1\u011b\21\5\6\0\3\5\1\0\2\5\4\0\1\u011c"+
    "\1\0\2\5\23\0\30\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\25\5\1\u011d\2\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\17\5\1\u011e\10\5\6\0\3\5\32\272\1\347"+
    "\3\272\1\275\1\272\1\u011f\36\272\1\0\2\5\4\0"+
    "\1\u0120\1\0\2\5\23\0\30\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\14\5\1\u0121"+
    "\13\5\6\0\3\5\1\0\2\5\4\0\1\u0122\1\0"+
    "\2\5\23\0\30\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\21\5\1\u0123\6\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\13\5\1\u0124\14\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\10\5\1\u0125\17\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\u0126\1\0\2\5\23\0"+
    "\30\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\4\5\1\u0127\23\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\10\5\1\u0128"+
    "\17\5\6\0\3\5\1\0\2\5\4\0\1\u0129\1\0"+
    "\2\5\23\0\30\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\14\5\1\u012a\13\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\15\5\1\u012b\12\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\22\5\1\u012c\5\5\6\0"+
    "\3\5\32\272\1\273\3\272\1\275\40\272\1\0\2\5"+
    "\4\0\1\u012d\1\0\2\5\23\0\30\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\10\5"+
    "\1\u012e\17\5\6\0\3\5\1\0\2\5\4\0\1\u012f"+
    "\1\0\2\5\23\0\30\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\21\5\1\u0130\6\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\u0131\1\0\2\5"+
    "\23\0\30\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\14\5\1\u0132\13\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\21\5"+
    "\1\u0133\6\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\21\5\1\u0134\6\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\16\5"+
    "\1\u0135\11\5\6\0\3\5\1\0\2\5\4\0\1\u0136"+
    "\1\0\2\5\23\0\30\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\15\5\1\u0137\12\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\14\5\1\u0138\13\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\14\5\1\u0139\13\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\7\5\1\u013a\20\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\20\5\1\u013b\7\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\17\5\1\u013c\10\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\24\5\1\u013d\3\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\u013e\1\0\2\5"+
    "\23\0\30\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\16\5\1\u013f\11\5\6\0\3\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\11\1\7\11\23\1\5\11"+
    "\3\1\2\11\2\1\2\0\2\11\3\1\16\11\1\1"+
    "\1\11\1\1\1\11\1\0\46\1\11\11\2\0\3\1"+
    "\1\11\1\1\1\11\2\0\55\1\1\11\3\0\1\1"+
    "\1\0\51\1\2\0\37\1\1\0\26\1\1\0\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private int contador; //CONTADOR DE TOKENS
  
  private void printError(String text, int line, int column){
  		System.out.println("Lexical Error on character: " + text + " at Line: " + line + " Column: " + column);
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador(java.io.Reader in) {
         contador = 0; 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analizador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 81: 
          { contador++; return new Yytoken(contador, null, sym.NULL, yyline + 1, yycolumn + 1);
          }
        case 114: break;
        case 28: 
          { contador ++; return new Yytoken(contador, null, sym.RBRACE, yyline+1, yycolumn+1);
          }
        case 115: break;
        case 102: 
          { contador++; return new Yytoken(contador, null, sym.PACKAGE, yyline + 1, yycolumn + 1);
          }
        case 116: break;
        case 11: 
          { contador++; return new Yytoken(contador, null, sym.MINUS, yyline + 1, yycolumn + 1);
          }
        case 117: break;
        case 68: 
          { contador++; return new Yytoken(contador, null, sym.TRY, yyline + 1, yycolumn + 1);
          }
        case 118: break;
        case 44: 
          { contador++; return new Yytoken(contador, null, sym.OROR, yyline + 1, yycolumn + 1);
          }
        case 119: break;
        case 16: 
          { yybegin(STRING); string.setLength(0);
          }
        case 120: break;
        case 110: 
          { contador ++; return new Yytoken(contador, null, sym.TRANSIENT, yyline+1, yycolumn+1);
          }
        case 121: break;
        case 74: 
          { contador ++; return new Yytoken(contador, null, sym.BYTE, yyline+1, yycolumn+1);
          }
        case 122: break;
        case 99: 
          { contador ++; return new Yytoken(contador, null, sym.STRING, yyline+1, yycolumn+1);
          }
        case 123: break;
        case 69: 
          { contador++; return new Yytoken(contador, null, sym.FOR, yyline + 1, yycolumn + 1);
          }
        case 124: break;
        case 3: 
          { contador++; return new Yytoken(contador, new Integer(yytext()), sym.INTEGER_LITERAL, yyline+1, yycolumn + 1);
          }
        case 125: break;
        case 73: 
          { contador++; return new Yytoken(contador, null, sym.URSHIFTEQ, yyline + 1, yycolumn + 1);
          }
        case 126: break;
        case 21: 
          { contador++; return new Yytoken(contador, null, sym.MULT, yyline + 1, yycolumn + 1);
          }
        case 127: break;
        case 14: 
          { contador ++; return new Yytoken(contador, null, sym.RBRACK, yyline+1, yycolumn+1);
          }
        case 128: break;
        case 97: 
          { contador++; return new Yytoken(contador, null, sym.SWITCH, yyline + 1, yycolumn + 1);
          }
        case 129: break;
        case 112: 
          { contador++; return new Yytoken(contador, null, sym.IMPLEMENTS, yyline + 1, yycolumn + 1);
          }
        case 130: break;
        case 5: 
          { contador ++; return new Yytoken(contador, null, sym.DOT, yyline+1, yycolumn+1);
          }
        case 131: break;
        case 45: 
          { contador++; return new Yytoken(contador, null, sym.OREQ, yyline + 1, yycolumn + 1);
          }
        case 132: break;
        case 19: 
          { contador ++; return new Yytoken(contador, null, sym.COMMA, yyline+1, yycolumn+1);
          }
        case 133: break;
        case 88: 
          { contador ++; return new Yytoken(contador, null, sym.FLOAT, yyline+1, yycolumn+1);
          }
        case 134: break;
        case 83: 
          { contador++; return new Yytoken(contador, null, sym.CLASS, yyline + 1, yycolumn + 1);
          }
        case 135: break;
        case 85: 
          { contador++; return new Yytoken(contador, null, sym.THROW, yyline + 1, yycolumn + 1);
          }
        case 136: break;
        case 76: 
          { contador++; return new Yytoken(contador, null, sym.CASE, yyline + 1, yycolumn + 1);
          }
        case 137: break;
        case 92: 
          { contador ++; return new Yytoken(contador, null, sym.PUBLIC, yyline+1, yycolumn+1);
          }
        case 138: break;
        case 46: 
          { contador++; return new Yytoken(contador, null, sym.EQEQ, yyline + 1, yycolumn + 1);
          }
        case 139: break;
        case 60: 
          { string.append( '\t' );
          }
        case 140: break;
        case 18: 
          { contador++; return new Yytoken(contador, null, sym.QUESTION, yyline + 1, yycolumn + 1);
          }
        case 141: break;
        case 71: 
          { contador++; return new Yytoken(contador, null, sym.ELSE, yyline + 1, yycolumn + 1);
          }
        case 142: break;
        case 25: 
          { contador ++; return new Yytoken(contador, null, sym.LPAREN, yyline+1, yycolumn+1);
          }
        case 143: break;
        case 66: 
          { contador++; return new Yytoken(contador, null, sym.LSHIFTEQ, yyline + 1, yycolumn + 1);
          }
        case 144: break;
        case 86: 
          { contador++; return new Yytoken(contador, null, sym.SUPER, yyline + 1, yycolumn + 1);
          }
        case 145: break;
        case 34: 
          { contador++; return new Yytoken(contador, new Double(yytext()), sym.FLOATING_POINT_LITERAL, yyline, yychar);
          }
        case 146: break;
        case 12: 
          { contador++; return new Yytoken(contador, null, sym.OR, yyline + 1, yycolumn + 1);
          }
        case 147: break;
        case 38: 
          { contador++; return new Yytoken(contador, null, sym.MODEQ, yyline + 1, yycolumn + 1);
          }
        case 148: break;
        case 77: 
          { contador ++; return new Yytoken(contador, null, sym.CHAR, yyline+1, yycolumn+1);
          }
        case 149: break;
        case 35: 
          { contador++; return new Yytoken(contador, null, sym.PLUSPLUS, yyline + 1, yycolumn + 1);
          }
        case 150: break;
        case 62: 
          { string.append( '\n' );
          }
        case 151: break;
        case 89: 
          { contador ++; return new Yytoken(contador, null, sym.FINAL, yyline+1, yycolumn+1);
          }
        case 152: break;
        case 6: 
          { contador++; return new Yytoken(contador, null, sym.PLUS, yyline + 1, yycolumn + 1);
          }
        case 153: break;
        case 39: 
          { contador++; return new Yytoken(contador, null, sym.XOREQ, yyline + 1, yycolumn + 1);
          }
        case 154: break;
        case 1: 
          { printError(yytext(), yyline, yychar);
          }
        case 155: break;
        case 20: 
          { contador++; return new Yytoken(contador, null, sym.EQ, yyline + 1, yycolumn + 1);
          }
        case 156: break;
        case 50: 
          { contador++; return new Yytoken(contador, null, sym.LTEQ, yyline + 1, yycolumn + 1);
          }
        case 157: break;
        case 106: 
          { contador++; return new Yytoken(contador, null, sym.CONTINUE, yyline + 1, yycolumn + 1);
          }
        case 158: break;
        case 37: 
          { contador++; return new Yytoken(contador, null, sym.NOTEQ, yyline + 1, yycolumn + 1);
          }
        case 159: break;
        case 24: 
          { contador++; return new Yytoken(contador, null, sym.DIV, yyline + 1, yycolumn + 1);
          }
        case 160: break;
        case 7: 
          { contador++; return new Yytoken(contador, null, sym.NOT, yyline + 1, yycolumn + 1);
          }
        case 161: break;
        case 101: 
          { contador ++; return new Yytoken(contador, null, sym.PRIVATE, yyline+1, yycolumn+1);
          }
        case 162: break;
        case 53: 
          { contador++; return new Yytoken(contador, null, sym.IF, yyline + 1, yycolumn + 1);
          }
        case 163: break;
        case 78: 
          { contador++; return new Yytoken(contador, null, sym.VOID, yyline + 1, yycolumn + 1);
          }
        case 164: break;
        case 72: 
          { contador ++; return new Yytoken(contador, null, sym.ENUM, yyline+1, yycolumn+1);
          }
        case 165: break;
        case 103: 
          { contador ++; return new Yytoken(contador, null, sym.BOOLEAN, yyline+1, yycolumn+1);
          }
        case 166: break;
        case 27: 
          { contador ++; return new Yytoken(contador, null, sym.LBRACE, yyline+1, yycolumn+1);
          }
        case 167: break;
        case 67: 
          { contador ++; return new Yytoken(contador, null, sym.INT, yyline+1, yycolumn+1);
          }
        case 168: break;
        case 36: 
          { contador++; return new Yytoken(contador, null, sym.PLUSEQ, yyline + 1, yycolumn + 1);
          }
        case 169: break;
        case 100: 
          { contador++; return new Yytoken(contador, null, sym.EXTENDS, yyline + 1, yycolumn + 1);
          }
        case 170: break;
        case 51: 
          { contador++; return new Yytoken(contador, null, sym.LSHIFT, yyline + 1, yycolumn + 1);
          }
        case 171: break;
        case 47: 
          { contador++; return new Yytoken(contador, null, sym.MULTEQ, yyline + 1, yycolumn + 1);
          }
        case 172: break;
        case 48: 
          { contador++; return new Yytoken(contador, null, sym.GTEQ, yyline + 1, yycolumn + 1);
          }
        case 173: break;
        case 108: 
          { contador ++; return new Yytoken(contador, null, sym.PROTECTED, yyline+1, yycolumn+1);
          }
        case 174: break;
        case 87: 
          { contador ++; return new Yytoken(contador, null, sym.SHORT, yyline+1, yycolumn+1);
          }
        case 175: break;
        case 55: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 176: break;
        case 29: 
          { contador ++; return new Yytoken(contador, null, sym.LBRACK, yyline+1, yycolumn+1);
          }
        case 177: break;
        case 43: 
          { contador++; return new Yytoken(contador, null, sym.MINUSEQ, yyline + 1, yycolumn + 1);
          }
        case 178: break;
        case 107: 
          { contador ++; return new Yytoken(contador, null, sym.ABSTRACT, yyline+1, yycolumn+1);
          }
        case 179: break;
        case 59: 
          { string.append( '\r' );
          }
        case 180: break;
        case 70: 
          { contador++; return new Yytoken(contador, null, sym.NEW, yyline + 1, yycolumn + 1);
          }
        case 181: break;
        case 52: 
          { contador++; return new Yytoken(contador, null, sym.DIVEQ, yyline + 1, yycolumn + 1);
          }
        case 182: break;
        case 58: 
          { string.append( '\b' );
          }
        case 183: break;
        case 10: 
          { contador++; return new Yytoken(contador, null, sym.AND, yyline + 1, yycolumn + 1);
          }
        case 184: break;
        case 105: 
          { contador++; return new Yytoken(contador, null, sym.FINALLY, yyline + 1, yycolumn + 1);
          }
        case 185: break;
        case 109: 
          { contador++; return new Yytoken(contador, null, sym.INTERFACE, yyline + 1, yycolumn + 1);
          }
        case 186: break;
        case 54: 
          { contador++; return new Yytoken(contador, null, sym.DO, yyline + 1, yycolumn + 1);
          }
        case 187: break;
        case 104: 
          { contador++; return new Yytoken(contador, null, sym.DEFAULT, yyline + 1, yycolumn + 1);
          }
        case 188: break;
        case 91: 
          { contador++; return new Yytoken(contador, null, sym.WHILE, yyline + 1, yycolumn + 1);
          }
        case 189: break;
        case 31: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 190: break;
        case 95: 
          { contador ++; return new Yytoken(contador, null, sym.DOUBLE, yyline+1, yycolumn+1);
          }
        case 191: break;
        case 56: 
          { string.append( '\"' );
          }
        case 192: break;
        case 32: 
          { yybegin(YYINITIAL); return new Yytoken(contador, string.toString(), sym.STRING_LITERAL, yyline+1, yycolumn + 1);
          }
        case 193: break;
        case 42: 
          { contador++; return new Yytoken(contador, null, sym.MINUSMINUS, yyline + 1, yycolumn + 1);
          }
        case 194: break;
        case 22: 
          { contador++; return new Yytoken(contador, null, sym.GT, yyline + 1, yycolumn + 1);
          }
        case 195: break;
        case 90: 
          { contador++; return new Yytoken(contador, false, sym.BOOLEAN_LITERAL, yyline + 1, yycolumn + 1);
          }
        case 196: break;
        case 40: 
          { contador++; return new Yytoken(contador, null, sym.ANDAND, yyline + 1, yycolumn + 1);
          }
        case 197: break;
        case 93: 
          { contador++; return new Yytoken(contador, null, sym.IMPORT, yyline + 1, yycolumn + 1);
          }
        case 198: break;
        case 57: 
          { string.append( '\'' );
          }
        case 199: break;
        case 79: 
          { contador++; return new Yytoken(contador, true, sym.BOOLEAN, yyline + 1, yycolumn + 1);
          }
        case 200: break;
        case 63: 
          { string.append( '\\' );
          }
        case 201: break;
        case 80: 
          { contador++; return new Yytoken(contador, null, sym.THIS, yyline + 1, yycolumn + 1);
          }
        case 202: break;
        case 17: 
          { contador++; return new Yytoken(contador, null, sym.COLON, yyline + 1, yycolumn + 1);
          }
        case 203: break;
        case 98: 
          { contador ++; return new Yytoken(contador, null, sym.NATIVE, yyline+1, yycolumn+1);
          }
        case 204: break;
        case 2: 
          { contador++; return new Yytoken(contador, yytext(), sym.IDENTIFIER, yyline+1, yycolumn + 1);
          }
        case 205: break;
        case 111: 
          { contador++; return new Yytoken(contador, null, sym.INSTANCEOF, yyline + 1, yycolumn + 1);
          }
        case 206: break;
        case 26: 
          { contador ++; return new Yytoken(contador, null, sym.RPAREN, yyline+1, yycolumn+1);
          }
        case 207: break;
        case 49: 
          { contador++; return new Yytoken(contador, null, sym.RSHIFT, yyline + 1, yycolumn + 1);
          }
        case 208: break;
        case 94: 
          { contador++; return new Yytoken(contador, null, sym.RETURN, yyline + 1, yycolumn + 1);
          }
        case 209: break;
        case 9: 
          { contador++; return new Yytoken(contador, null, sym.XOR, yyline + 1, yycolumn + 1);
          }
        case 210: break;
        case 61: 
          { string.append( '\f' );
          }
        case 211: break;
        case 75: 
          { contador ++; return new Yytoken(contador, null, sym.LONG, yyline+1, yycolumn+1);
          }
        case 212: break;
        case 96: 
          { contador ++; return new Yytoken(contador, null,sym.STATIC, yyline+1, yycolumn+1);
          }
        case 213: break;
        case 13: 
          { contador++; return new Yytoken(contador, null, sym.COMP, yyline + 1, yycolumn + 1);
          }
        case 214: break;
        case 15: 
          { contador ++; return new Yytoken(contador, null, sym.SEMICOLON, yyline+1, yycolumn+1);
          }
        case 215: break;
        case 30: 
          { string.append( yytext() );
          }
        case 216: break;
        case 113: 
          { contador ++; return new Yytoken(contador, null, sym.SYNCHRONIZED, yyline+1, yycolumn+1);
          }
        case 217: break;
        case 64: 
          { contador++; return new Yytoken(contador, null, sym.RSHIFTEQ, yyline + 1, yycolumn + 1);
          }
        case 218: break;
        case 65: 
          { contador++; return new Yytoken(contador, null, sym.URSHIFT, yyline + 1, yycolumn + 1);
          }
        case 219: break;
        case 82: 
          { contador++; return new Yytoken(contador, null, sym.BREAK, yyline + 1, yycolumn + 1);
          }
        case 220: break;
        case 84: 
          { contador++; return new Yytoken(contador, null, sym.CATCH, yyline + 1, yycolumn + 1);
          }
        case 221: break;
        case 33: 
          { contador++; return new Yytoken(contador, new Float(yytext().substring(0,yylength()-1)), sym.FLOATING_POINT_LITERAL, yyline+1, yycolumn + 1);
          }
        case 222: break;
        case 23: 
          { contador++; return new Yytoken(contador, null, sym.LT, yyline + 1, yycolumn + 1);
          }
        case 223: break;
        case 8: 
          { contador++; return new Yytoken(contador, null, sym.MOD, yyline + 1, yycolumn + 1);
          }
        case 224: break;
        case 41: 
          { contador++; return new Yytoken(contador, null, sym.ANDEQ, yyline + 1, yycolumn + 1);
          }
        case 225: break;
        case 4: 
          { 
          }
        case 226: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new Yytoken(contador, yytext(), sym.EOF, yyline, yycolumn);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Analizador <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Analizador scanner = null;
        try {
          scanner = new Analizador( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) {java_cup.runtime.Symbol s = scanner.debug_next_token(); System.out.println(s.toString());}
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
