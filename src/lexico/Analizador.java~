/* The following code was generated by JFlex 1.4.3 on 06/06/15 15:20 */

package lexico;

//import java_cup.runtime.Symbol;
//import static lexico.Simbolos.java


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/06/15 15:20 from the specification file
 * <tt>lexer.flex</tt>
 */
class Analizador {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\4\1\0\1\0\1\3\22\0\1\41\11\0\1\6"+
    "\4\0\1\5\12\2\7\0\32\1\6\0\1\17\1\13\1\16\1\31"+
    "\1\24\1\32\1\35\1\30\1\15\1\1\1\26\1\14\1\34\1\25"+
    "\1\23\1\11\1\1\1\22\1\20\1\21\1\12\1\36\1\37\1\33"+
    "\1\27\1\40\1\7\1\0\1\10\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\16\2"+
    "\1\6\1\0\10\2\1\7\23\2\1\10\6\2\2\6"+
    "\2\0\11\2\1\11\16\2\1\12\7\2\1\13\5\2"+
    "\1\14\1\2\1\0\1\6\6\2\1\15\1\16\5\2"+
    "\1\17\2\2\1\20\6\2\1\21\1\2\1\22\3\2"+
    "\1\23\1\2\1\24\13\2\1\25\5\2\1\26\1\27"+
    "\2\2\1\30\2\2\1\31\2\2\1\32\6\2\1\33"+
    "\1\34\1\35\1\36\1\37\7\2\1\40\2\2\1\41"+
    "\1\2\1\42\2\2\1\43\1\2\1\44\1\45\2\2"+
    "\1\46\1\47\1\2\1\50\10\2\1\51\1\52\1\53"+
    "\4\2\1\54\1\55\3\2\1\56\1\2\1\57\2\2"+
    "\1\60\1\2\1\61\1\62\1\2\1\63\1\2\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\42\0\146\0\42\0\42\0\210"+
    "\0\252\0\314\0\356\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198"+
    "\0\u01ba\0\u01dc\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8"+
    "\0\u02ca\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\104"+
    "\0\u03b8\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6"+
    "\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6"+
    "\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6"+
    "\0\u06e8\0\u070a\0\u072c\0\42\0\u074e\0\u0770\0\u0792\0\u07b4"+
    "\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4"+
    "\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4"+
    "\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0\0\104\0\u0ac2"+
    "\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\104\0\u0bb0"+
    "\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\104\0\u0c5a\0\u0c7c\0\u074e"+
    "\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u0d48\0\104\0\104"+
    "\0\u0d6a\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2\0\104\0\u0e14\0\u0e36"+
    "\0\104\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\104"+
    "\0\u0f24\0\104\0\u0f46\0\u0f68\0\u0f8a\0\104\0\u0fac\0\104"+
    "\0\u0fce\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\u109a\0\u10bc"+
    "\0\u10de\0\u1100\0\u1122\0\104\0\u1144\0\u1166\0\u1188\0\u11aa"+
    "\0\u11cc\0\104\0\104\0\u11ee\0\u1210\0\104\0\u1232\0\u1254"+
    "\0\104\0\u1276\0\u1298\0\104\0\u12ba\0\u12dc\0\u12fe\0\u1320"+
    "\0\u1342\0\u1364\0\104\0\u1386\0\104\0\104\0\104\0\u13a8"+
    "\0\u13ca\0\u13ec\0\u140e\0\u1430\0\u1452\0\u1474\0\104\0\u1496"+
    "\0\u14b8\0\104\0\u14da\0\104\0\u14fc\0\u151e\0\104\0\u1540"+
    "\0\104\0\104\0\u1562\0\u1584\0\104\0\104\0\u15a6\0\104"+
    "\0\u15c8\0\u15ea\0\u160c\0\u162e\0\u1650\0\u1672\0\u1694\0\u16b6"+
    "\0\104\0\104\0\104\0\u16d8\0\u16fa\0\u171c\0\u173e\0\104"+
    "\0\104\0\u1760\0\u1782\0\u17a4\0\104\0\u17c6\0\104\0\u17e8"+
    "\0\u180a\0\104\0\u182c\0\104\0\104\0\u184e\0\104\0\u1870"+
    "\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\2\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\3\1\21\1\22\3\3\1\23\1\24"+
    "\4\3\1\25\1\3\1\4\43\0\2\3\6\0\30\3"+
    "\6\0\1\26\1\27\34\0\2\3\6\0\1\3\1\30"+
    "\4\3\1\31\2\3\1\32\16\3\2\0\2\3\6\0"+
    "\11\3\1\33\1\34\3\3\1\35\11\3\2\0\2\3"+
    "\6\0\12\3\1\36\15\3\2\0\2\3\6\0\14\3"+
    "\1\37\4\3\1\40\1\3\1\41\4\3\2\0\2\3"+
    "\6\0\3\3\1\42\2\3\1\43\3\3\1\44\4\3"+
    "\1\45\10\3\2\0\2\3\6\0\2\3\1\46\25\3"+
    "\2\0\2\3\6\0\1\3\1\47\6\3\1\50\5\3"+
    "\1\51\1\52\6\3\1\53\1\3\2\0\2\3\6\0"+
    "\11\3\1\54\5\3\1\55\10\3\2\0\2\3\6\0"+
    "\13\3\1\56\14\3\2\0\2\3\6\0\3\3\1\57"+
    "\16\3\1\60\5\3\2\0\2\3\6\0\1\3\1\61"+
    "\4\3\1\62\4\3\1\63\14\3\2\0\2\3\6\0"+
    "\12\3\1\64\1\65\14\3\2\0\2\3\6\0\3\3"+
    "\1\66\1\67\1\3\1\70\3\3\1\71\15\3\2\0"+
    "\2\3\6\0\17\3\1\72\10\3\1\0\3\26\1\73"+
    "\1\74\35\26\6\75\1\76\33\75\1\0\2\3\6\0"+
    "\2\3\1\77\25\3\2\0\2\3\6\0\5\3\1\100"+
    "\22\3\2\0\2\3\6\0\4\3\1\101\5\3\1\102"+
    "\15\3\2\0\2\3\6\0\13\3\1\103\14\3\2\0"+
    "\2\3\6\0\12\3\1\104\15\3\2\0\2\3\6\0"+
    "\10\3\1\105\17\3\2\0\2\3\6\0\14\3\1\106"+
    "\13\3\2\0\2\3\6\0\7\3\1\107\1\110\17\3"+
    "\2\0\2\3\6\0\1\111\27\3\2\0\2\3\6\0"+
    "\6\3\1\112\21\3\2\0\2\3\6\0\7\3\1\113"+
    "\1\114\17\3\2\0\2\3\6\0\14\3\1\115\13\3"+
    "\2\0\2\3\6\0\6\3\1\116\21\3\2\0\2\3"+
    "\6\0\7\3\1\117\20\3\2\0\2\3\6\0\1\120"+
    "\27\3\2\0\2\3\6\0\6\3\1\121\21\3\2\0"+
    "\2\3\6\0\14\3\1\122\13\3\2\0\2\3\6\0"+
    "\12\3\1\123\15\3\2\0\2\3\6\0\4\3\1\124"+
    "\23\3\2\0\2\3\6\0\1\3\1\125\4\3\1\126"+
    "\7\3\1\127\11\3\2\0\2\3\6\0\4\3\1\130"+
    "\4\3\1\131\16\3\2\0\2\3\6\0\10\3\1\132"+
    "\17\3\2\0\2\3\6\0\7\3\1\133\20\3\2\0"+
    "\2\3\6\0\10\3\1\134\17\3\2\0\2\3\6\0"+
    "\3\3\1\135\24\3\2\0\2\3\6\0\10\3\1\136"+
    "\17\3\2\0\2\3\6\0\26\3\1\137\1\3\2\0"+
    "\2\3\6\0\1\3\1\140\26\3\2\0\2\3\6\0"+
    "\21\3\1\141\6\3\2\0\2\3\6\0\12\3\1\142"+
    "\15\3\2\0\2\3\6\0\14\3\1\143\13\3\2\0"+
    "\2\3\6\0\3\3\1\144\24\3\2\0\2\3\6\0"+
    "\11\3\1\145\16\3\2\0\2\3\6\0\4\3\1\146"+
    "\23\3\5\0\1\74\35\0\6\75\1\147\40\75\1\150"+
    "\1\147\33\75\1\0\2\3\6\0\3\3\1\151\24\3"+
    "\2\0\2\3\6\0\15\3\1\152\12\3\2\0\2\3"+
    "\6\0\25\3\1\153\2\3\2\0\2\3\6\0\10\3"+
    "\1\154\17\3\2\0\2\3\6\0\6\3\1\155\21\3"+
    "\2\0\2\3\6\0\3\3\1\156\24\3\2\0\2\3"+
    "\6\0\13\3\1\157\14\3\2\0\2\3\6\0\24\3"+
    "\1\160\3\3\2\0\2\3\6\0\10\3\1\161\17\3"+
    "\2\0\2\3\6\0\13\3\1\162\14\3\2\0\2\3"+
    "\6\0\3\3\1\163\6\3\1\164\15\3\2\0\2\3"+
    "\6\0\7\3\1\165\20\3\2\0\2\3\6\0\13\3"+
    "\1\166\14\3\2\0\2\3\6\0\5\3\1\167\22\3"+
    "\2\0\2\3\6\0\10\3\1\170\17\3\2\0\2\3"+
    "\6\0\11\3\1\171\16\3\2\0\2\3\6\0\10\3"+
    "\1\172\17\3\2\0\2\3\6\0\13\3\1\173\14\3"+
    "\2\0\2\3\6\0\10\3\1\174\17\3\2\0\2\3"+
    "\6\0\5\3\1\175\22\3\2\0\2\3\6\0\11\3"+
    "\1\176\16\3\2\0\2\3\6\0\10\3\1\177\17\3"+
    "\2\0\2\3\6\0\13\3\1\200\14\3\2\0\2\3"+
    "\6\0\14\3\1\201\13\3\2\0\2\3\6\0\7\3"+
    "\1\202\20\3\2\0\2\3\6\0\12\3\1\203\1\204"+
    "\14\3\2\0\2\3\6\0\1\3\1\205\26\3\2\0"+
    "\2\3\6\0\13\3\1\206\14\3\2\0\2\3\6\0"+
    "\13\3\1\207\14\3\2\0\2\3\6\0\3\3\1\210"+
    "\24\3\2\0\2\3\6\0\4\3\1\211\23\3\2\0"+
    "\2\3\6\0\2\3\1\212\25\3\2\0\2\3\6\0"+
    "\6\3\1\213\21\3\2\0\2\3\6\0\6\3\1\214"+
    "\21\3\2\0\2\3\6\0\6\3\1\215\21\3\2\0"+
    "\2\3\6\0\7\3\1\216\20\3\2\0\2\3\6\0"+
    "\3\3\1\217\24\3\1\0\5\75\1\74\1\147\33\75"+
    "\1\0\2\3\6\0\4\3\1\220\23\3\2\0\2\3"+
    "\6\0\6\3\1\221\21\3\2\0\2\3\6\0\6\3"+
    "\1\222\21\3\2\0\2\3\6\0\13\3\1\223\14\3"+
    "\2\0\2\3\6\0\15\3\1\224\12\3\2\0\2\3"+
    "\6\0\13\3\1\225\14\3\2\0\2\3\6\0\6\3"+
    "\1\226\21\3\2\0\2\3\6\0\11\3\1\227\16\3"+
    "\2\0\2\3\6\0\13\3\1\230\14\3\2\0\2\3"+
    "\6\0\11\3\1\231\16\3\2\0\2\3\6\0\7\3"+
    "\1\232\20\3\2\0\2\3\6\0\17\3\1\233\10\3"+
    "\2\0\2\3\6\0\4\3\1\234\23\3\2\0\2\3"+
    "\6\0\11\3\1\235\16\3\2\0\2\3\6\0\11\3"+
    "\1\236\16\3\2\0\2\3\6\0\4\3\1\237\23\3"+
    "\2\0\2\3\6\0\17\3\1\240\10\3\2\0\2\3"+
    "\6\0\10\3\1\241\17\3\2\0\2\3\6\0\5\3"+
    "\1\242\22\3\2\0\2\3\6\0\7\3\1\243\20\3"+
    "\2\0\2\3\6\0\26\3\1\244\1\3\2\0\2\3"+
    "\6\0\6\3\1\245\21\3\2\0\2\3\6\0\11\3"+
    "\1\246\16\3\2\0\2\3\6\0\14\3\1\247\13\3"+
    "\2\0\2\3\6\0\25\3\1\250\2\3\2\0\2\3"+
    "\6\0\3\3\1\251\24\3\2\0\2\3\6\0\1\3"+
    "\1\252\26\3\2\0\2\3\6\0\10\3\1\253\17\3"+
    "\2\0\2\3\6\0\3\3\1\254\24\3\2\0\2\3"+
    "\6\0\13\3\1\255\14\3\2\0\2\3\6\0\13\3"+
    "\1\256\14\3\2\0\2\3\6\0\5\3\1\257\22\3"+
    "\2\0\2\3\6\0\24\3\1\260\3\3\2\0\2\3"+
    "\6\0\10\3\1\261\17\3\2\0\2\3\6\0\5\3"+
    "\1\262\22\3\2\0\2\3\6\0\6\3\1\263\21\3"+
    "\2\0\2\3\6\0\14\3\1\264\13\3\2\0\2\3"+
    "\6\0\21\3\1\265\6\3\2\0\2\3\6\0\23\3"+
    "\1\266\4\3\2\0\2\3\6\0\10\3\1\267\17\3"+
    "\2\0\2\3\6\0\14\3\1\270\13\3\2\0\2\3"+
    "\6\0\6\3\1\271\21\3\2\0\2\3\6\0\5\3"+
    "\1\272\22\3\2\0\2\3\6\0\11\3\1\273\16\3"+
    "\2\0\2\3\6\0\17\3\1\274\10\3\2\0\2\3"+
    "\6\0\4\3\1\275\23\3\2\0\2\3\6\0\20\3"+
    "\1\276\7\3\2\0\2\3\6\0\14\3\1\277\13\3"+
    "\2\0\2\3\6\0\20\3\1\300\7\3\2\0\2\3"+
    "\6\0\13\3\1\301\14\3\2\0\2\3\6\0\13\3"+
    "\1\302\14\3\2\0\2\3\6\0\3\3\1\303\24\3"+
    "\2\0\2\3\6\0\3\3\1\304\24\3\2\0\2\3"+
    "\6\0\13\3\1\305\14\3\2\0\2\3\6\0\13\3"+
    "\1\306\14\3\2\0\2\3\6\0\10\3\1\307\17\3"+
    "\2\0\2\3\6\0\14\3\1\310\13\3\2\0\2\3"+
    "\6\0\5\3\1\311\22\3\2\0\2\3\6\0\6\3"+
    "\1\312\21\3\2\0\2\3\6\0\13\3\1\313\14\3"+
    "\2\0\2\3\6\0\1\3\1\314\26\3\2\0\2\3"+
    "\6\0\5\3\1\315\22\3\2\0\2\3\6\0\12\3"+
    "\1\316\15\3\2\0\2\3\6\0\13\3\1\317\14\3"+
    "\2\0\2\3\6\0\7\3\1\320\20\3\2\0\2\3"+
    "\6\0\7\3\1\321\20\3\2\0\2\3\6\0\10\3"+
    "\1\322\17\3\2\0\2\3\6\0\16\3\1\323\11\3"+
    "\2\0\2\3\6\0\13\3\1\324\14\3\2\0\2\3"+
    "\6\0\13\3\1\325\14\3\2\0\2\3\6\0\5\3"+
    "\1\326\22\3\2\0\2\3\6\0\14\3\1\327\13\3"+
    "\2\0\2\3\6\0\13\3\1\330\14\3\2\0\2\3"+
    "\6\0\10\3\1\331\17\3\2\0\2\3\6\0\14\3"+
    "\1\332\13\3\2\0\2\3\6\0\14\3\1\333\13\3"+
    "\2\0\2\3\6\0\6\3\1\334\21\3\2\0\2\3"+
    "\6\0\20\3\1\335\7\3\2\0\2\3\6\0\12\3"+
    "\1\336\15\3\2\0\2\3\6\0\13\3\1\337\14\3"+
    "\2\0\2\3\6\0\10\3\1\340\17\3\2\0\2\3"+
    "\6\0\4\3\1\341\23\3\2\0\2\3\6\0\10\3"+
    "\1\342\17\3\2\0\2\3\6\0\21\3\1\343\6\3"+
    "\2\0\2\3\6\0\21\3\1\344\6\3\2\0\2\3"+
    "\6\0\7\3\1\345\20\3\2\0\2\3\6\0\27\3"+
    "\1\346\2\0\2\3\6\0\13\3\1\347\14\3\2\0"+
    "\2\3\6\0\13\3\1\350\14\3\2\0\2\3\6\0"+
    "\20\3\1\351\7\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\17\1\1\0"+
    "\44\1\1\11\2\0\50\1\1\0\202\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int contador; 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Analizador(java.io.Reader in) {
         contador = 0; 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Analizador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 92) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { /* ignore */
          }
        case 53: break;
        case 23: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CATCH.toString(), yyline, yychar);
          }
        case 54: break;
        case 34: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SWITCH.toString(), yyline, yychar);
          }
        case 55: break;
        case 32: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IMPORT.toString(), yyline, yychar);
          }
        case 56: break;
        case 42: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DEFAULT.toString(), yyline, yychar);
          }
        case 57: break;
        case 20: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NULL.toString(), yyline, yychar);
          }
        case 58: break;
        case 22: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CLASS.toString(), yyline, yychar);
          }
        case 59: break;
        case 2: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ID.toString(), yyline, yychar);
          }
        case 60: break;
        case 49: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INSTANCEOF.toString(), yyline, yychar);
          }
        case 61: break;
        case 13: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.BYTE.toString(), yyline, yychar);
          }
        case 62: break;
        case 18: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THIS.toString(), yyline, yychar);
          }
        case 63: break;
        case 46: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PROTECTED.toString(), yyline, yychar);
          }
        case 64: break;
        case 8: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DO.toString(), yyline, yychar);
          }
        case 65: break;
        case 11: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NEW.toString(), yyline, yychar);
          }
        case 66: break;
        case 5: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.CloseBracket.toString(), yyline, yychar);
          }
        case 67: break;
        case 27: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FLOAT.toString(), yyline, yychar);
          }
        case 68: break;
        case 31: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PUBLIC.toString(), yyline, yychar);
          }
        case 69: break;
        case 51: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THREADSAFE.toString(), yyline, yychar);
          }
        case 70: break;
        case 25: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SHORT.toString(), yyline, yychar);
          }
        case 71: break;
        case 15: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CASE.toString(), yyline, yychar);
          }
        case 72: break;
        case 21: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.BREAK.toString(), yyline, yychar);
          }
        case 73: break;
        case 26: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THROW.toString(), yyline, yychar);
          }
        case 74: break;
        case 14: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.LONG.toString(), yyline, yychar);
          }
        case 75: break;
        case 37: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DOUBLE.toString(), yyline, yychar);
          }
        case 76: break;
        case 45: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ABSTRACT.toString(), yyline, yychar);
          }
        case 77: break;
        case 44: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CONTINUE.toString(), yyline, yychar);
          }
        case 78: break;
        case 36: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NATIVE.toString(), yyline, yychar);
          }
        case 79: break;
        case 40: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.BOOLEAN.toString(), yyline, yychar);
          }
        case 80: break;
        case 9: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INT.toString(), yyline, yychar);
          }
        case 81: break;
        case 16: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CHAR.toString(), yyline, yychar);
          }
        case 82: break;
        case 12: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FOR.toString(), yyline, yychar);
          }
        case 83: break;
        case 1: 
          { return new Yytoken(contador, yytext(), Simbolos.ERRO.toString(), yyline, yychar);
          }
        case 84: break;
        case 39: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PRIVATE.toString(), yyline, yychar);
          }
        case 85: break;
        case 19: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ELSE.toString(), yyline, yychar);
          }
        case 86: break;
        case 35: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.RETURN.toString(), yyline, yychar);
          }
        case 87: break;
        case 47: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INTERFACE.toString(), yyline, yychar);
          }
        case 88: break;
        case 30: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.WHILE.toString(), yyline, yychar);
          }
        case 89: break;
        case 38: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PACKAGE.toString(), yyline, yychar);
          }
        case 90: break;
        case 17: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRUE.toString(), yyline, yychar);
          }
        case 91: break;
        case 4: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.OpenBracket.toString(), yyline, yychar);
          }
        case 92: break;
        case 24: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SUPER.toString(), yyline, yychar);
          }
        case 93: break;
        case 10: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRY.toString(), yyline, yychar);
          }
        case 94: break;
        case 48: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRANSIENT.toString(), yyline, yychar);
          }
        case 95: break;
        case 43: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FINALLY.toString(), yyline, yychar);
          }
        case 96: break;
        case 29: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FALSE.toString(), yyline, yychar);
          }
        case 97: break;
        case 41: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.EXTENDS.toString(), yyline, yychar);
          }
        case 98: break;
        case 7: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IF.toString(), yyline, yychar);
          }
        case 99: break;
        case 50: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IMPLEMENTS.toString(), yyline, yychar);
          }
        case 100: break;
        case 33: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.STATIC.toString(), yyline, yychar);
          }
        case 101: break;
        case 28: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FINAL.toString(), yyline, yychar);
          }
        case 102: break;
        case 52: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SYNCHRONIZED.toString(), yyline, yychar);
          }
        case 103: break;
        case 3: 
          { 
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
