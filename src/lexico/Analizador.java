/* The following code was generated by JFlex 1.4.3 on 6/9/15 5:35 AM */

package lexico;

import java_cup.runtime.*;

//import static lexico.Simbolos.java


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/9/15 5:35 AM from the specification file
 * <tt>lexer.flex</tt>
 */
public class Analizador implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\0\1\5\1\3\22\0\1\5\1\13\1\24"+
    "\1\0\1\0\1\14\1\16\1\25\1\66\1\67\1\32\1\10\1\30"+
    "\1\17\1\6\1\35\1\2\11\2\1\26\1\72\1\34\1\31\1\33"+
    "\1\27\1\0\3\1\1\12\1\36\1\11\10\1\1\40\2\1\1\37"+
    "\1\1\7\1\1\22\1\65\1\23\1\15\1\0\1\0\1\51\1\43"+
    "\1\46\1\54\1\7\1\56\1\63\1\61\1\45\1\1\1\73\1\44"+
    "\1\64\1\57\1\53\1\41\1\1\1\47\1\55\1\52\1\42\1\50"+
    "\1\75\1\74\1\60\1\62\1\70\1\20\1\71\1\21\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\15\2\1\31\1\32\1\33\1\34\1\35"+
    "\1\2\1\36\2\37\1\40\1\36\1\1\2\0\1\41"+
    "\1\42\3\2\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\0\1\4\7\2\1\65"+
    "\14\2\1\66\15\2\2\36\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\2\0\3\2\1\100"+
    "\1\101\1\102\2\0\10\2\1\103\14\2\1\104\14\2"+
    "\1\105\1\106\3\2\2\36\1\107\1\110\1\2\1\111"+
    "\3\0\1\4\1\0\6\2\1\112\1\113\6\2\1\114"+
    "\1\2\1\115\1\2\1\116\1\2\1\117\1\2\1\120"+
    "\13\2\1\121\2\2\2\36\1\2\2\0\4\2\1\122"+
    "\5\2\1\123\1\124\4\2\1\125\2\2\1\126\2\2"+
    "\1\127\1\2\1\130\1\131\1\132\1\2\1\133\1\2"+
    "\1\0\1\134\7\2\1\135\1\2\1\136\3\2\1\137"+
    "\1\140\1\2\1\141\1\2\1\142\1\143\1\0\1\144"+
    "\1\2\1\145\1\146\6\2\1\147\1\2\1\150\4\2"+
    "\1\151\1\152\2\2\1\153\1\154\2\2\1\155\1\2"+
    "\1\156\1\157\2\2\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\272"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\272\0\272\0\272\0\272\0\272\0\272\0\272"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782"+
    "\0\u07c0\0\u07fe\0\272\0\272\0\272\0\272\0\272\0\u083c"+
    "\0\u087a\0\u08b8\0\272\0\272\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\272\0\272\0\u09ee\0\u0a2c\0\u0a6a\0\272\0\272\0\272"+
    "\0\272\0\272\0\272\0\272\0\272\0\272\0\272\0\272"+
    "\0\272\0\272\0\272\0\u0aa8\0\272\0\u0ae6\0\272\0\u0b24"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\370\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6"+
    "\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\272\0\272\0\272"+
    "\0\272\0\272\0\272\0\272\0\272\0\272\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\272\0\u1550\0\272\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\370\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\370\0\370\0\u1e08\0\u1e46\0\u1e84\0\u1ec2"+
    "\0\u1f00\0\370\0\370\0\u1f3e\0\272\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u1fba\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\370\0\370\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\370\0\u235c\0\370\0\u239a\0\370\0\u23d8\0\370\0\u2416"+
    "\0\370\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\370\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a"+
    "\0\370\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\370\0\370"+
    "\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\370\0\u2bd6\0\u2c14\0\370"+
    "\0\u2c52\0\u2c90\0\370\0\u2cce\0\370\0\u2d0c\0\370\0\u2d4a"+
    "\0\370\0\u2d88\0\u2dc6\0\370\0\u2e04\0\u2e42\0\u2e80\0\u2ebe"+
    "\0\u2efc\0\u2f3a\0\u2f78\0\370\0\u2fb6\0\370\0\u2ff4\0\u3032"+
    "\0\u3070\0\370\0\370\0\u30ae\0\370\0\u30ec\0\370\0\370"+
    "\0\u312a\0\370\0\u3168\0\370\0\370\0\u31a6\0\u31e4\0\u3222"+
    "\0\u3260\0\u329e\0\u32dc\0\370\0\u331a\0\370\0\u3358\0\u3396"+
    "\0\u33d4\0\u3412\0\370\0\370\0\u3450\0\u348e\0\370\0\370"+
    "\0\u34cc\0\u350a\0\370\0\u3548\0\370\0\370\0\u3586\0\u35c4"+
    "\0\370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13"+
    "\2\5\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\4\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\3\5\1\36\1\5\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\5"+
    "\1\47\1\50\1\51\1\52\5\5\1\4\1\53\1\54"+
    "\1\55\1\56\1\57\2\5\1\60\3\61\1\62\1\63"+
    "\17\61\1\64\10\61\1\65\27\61\1\66\10\61\3\4"+
    "\1\7\2\10\2\4\1\13\2\4\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\4\4\1\26\1\27\1\4"+
    "\1\31\1\32\1\33\1\34\1\35\40\4\77\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\27\5\6\0\3\5"+
    "\2\0\1\6\3\0\1\67\1\70\1\0\1\71\1\72"+
    "\23\0\1\70\15\0\1\72\1\0\1\71\23\0\1\10"+
    "\73\0\1\67\74\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\6\5\1\73\12\5\1\74\5\5\6\0\1\5"+
    "\1\75\1\5\10\0\1\76\20\0\1\77\75\0\1\100"+
    "\75\0\1\101\75\0\1\102\62\0\1\103\12\0\1\104"+
    "\63\0\1\105\11\0\1\106\64\0\1\107\10\0\1\110"+
    "\75\0\1\111\75\0\1\112\75\0\1\113\1\0\1\114"+
    "\73\0\1\115\2\0\1\116\72\0\1\117\1\120\2\0"+
    "\1\121\41\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\4\5\1\122\4\5\1\123\1\5\1\124\13\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\11\5\1\125\3\5\1\126\4\5\1\127\4\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\15\5\1\130\11\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\20\5\1\131\1\132\4\5"+
    "\1\133\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\6\5\1\134\4\5\1\135\1\5\1\136"+
    "\5\5\1\137\3\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\140\1\0\2\5\23\0\27\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\15\5\1\141"+
    "\11\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\5\5\1\142\21\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\11\5\1\143"+
    "\11\5\1\144\3\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\145\1\0\2\5\23\0\15\5\1\146\11\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\4\5\1\147\7\5\1\150\5\5\1\151\1\152\3\5"+
    "\6\0\2\5\1\153\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\6\5\1\154\1\155\3\5\1\156\1\5"+
    "\1\157\11\5\6\0\3\5\1\0\2\5\4\0\1\160"+
    "\1\0\2\5\23\0\4\5\1\161\6\5\1\162\13\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\23\5\1\163\3\5\6\0\3\5\3\61\2\0"+
    "\17\61\1\0\40\61\1\0\10\61\4\0\1\63\71\0"+
    "\3\61\2\0\17\61\1\0\5\61\1\164\2\61\1\165"+
    "\27\61\1\0\10\61\4\166\1\0\17\166\1\167\1\170"+
    "\15\166\1\171\3\166\1\172\2\166\1\173\3\166\1\174"+
    "\1\175\5\166\1\176\10\166\2\0\1\67\4\0\1\70"+
    "\1\0\1\71\1\72\23\0\1\70\15\0\1\72\1\0"+
    "\1\71\21\0\1\177\5\0\1\200\6\0\1\200\57\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\17\5\1\201"+
    "\7\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\4\5\1\202\22\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\14\5\1\203"+
    "\12\5\6\0\3\5\31\0\1\204\1\0\1\205\73\0"+
    "\1\206\44\0\32\207\1\210\43\207\3\121\1\7\1\10"+
    "\71\121\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\5\5\1\211\21\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\7\5\1\212\5\5\1\213"+
    "\11\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\10\5\1\214\16\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\215\1\0\2\5\23\0\27\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\15\5\1\216\11\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\14\5\1\217\12\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\21\5\1\220\5\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\14\5\1\221\2\5\1\222"+
    "\7\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\3\5\1\223\23\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\13\5\1\224"+
    "\13\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\14\5\1\225\2\5\1\226\7\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\21\5\1\227\5\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\13\5\1\230\13\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\14\5\1\231\12\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\7\5\1\232\17\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\17\5\1\233\7\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\4\5\1\234\6\5\1\235"+
    "\6\5\1\236\4\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\7\5\1\237\1\5\1\240"+
    "\15\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\20\5\1\241\6\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\4\5\1\242"+
    "\22\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\3\5\1\243\23\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\13\5\1\244"+
    "\13\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\21\5\1\245\5\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\15\5\1\246"+
    "\11\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\7\5\1\247\17\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\15\5\1\250"+
    "\11\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\21\5\1\251\5\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\6\5\1\252"+
    "\20\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\11\5\1\253\15\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\27\5\6\0"+
    "\2\5\1\254\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\6\5\1\255\20\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\14\5\1\256\12\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\7\5\1\257\17\5\6\0\3\5\3\260\2\207"+
    "\17\260\1\207\5\260\1\261\32\260\1\207\10\260\3\165"+
    "\1\7\1\10\17\165\1\121\40\165\1\121\10\165\2\0"+
    "\1\177\6\0\1\71\1\72\41\0\1\72\1\0\1\71"+
    "\21\0\1\177\74\0\2\5\4\0\1\262\1\0\2\5"+
    "\23\0\27\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\26\5\1\263\6\0\3\5\1\0"+
    "\2\5\4\0\1\264\1\0\2\5\23\0\27\5\6\0"+
    "\3\5\31\0\1\265\44\0\32\207\1\266\43\207\32\267"+
    "\1\270\2\267\1\271\1\272\37\267\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\6\5\1\273\20\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\12\5\1\274\14\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\14\5\1\275\12\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\27\5\6\0\1\276\2\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\13\5\1\277\13\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\6\5"+
    "\1\300\20\5\6\0\3\5\1\0\2\5\4\0\1\301"+
    "\1\0\2\5\23\0\27\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\25\5\1\302\1\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\303\1\0\2\5"+
    "\23\0\27\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\14\5\1\304\12\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\6\5"+
    "\1\305\6\5\1\306\11\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\17\5\1\307\7\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\10\5\1\310\16\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\311\1\0\2\5\23\0\27\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\14\5"+
    "\1\312\12\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\11\5\1\313\15\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\4\5"+
    "\1\314\22\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\16\5\1\315\10\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\14\5"+
    "\1\316\12\5\6\0\3\5\1\0\2\5\4\0\1\317"+
    "\1\0\2\5\23\0\27\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\21\5\1\320\5\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\17\5\1\321\7\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\15\5\1\322\11\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\13\5\1\323\13\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\5\5\1\324\21\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\325\1\0\2\5"+
    "\23\0\27\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\14\5\1\326\12\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\10\5"+
    "\1\327\16\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\11\5\1\330\15\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\14\5"+
    "\1\331\12\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\13\5\1\332\13\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\13\5"+
    "\1\333\13\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\17\5\1\334\7\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\6\5"+
    "\1\335\20\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\7\5\1\336\17\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\6\5"+
    "\1\337\20\5\6\0\3\5\3\260\2\207\17\260\1\207"+
    "\5\260\1\340\32\260\1\207\10\260\3\261\2\267\17\261"+
    "\1\267\5\261\1\341\32\261\1\267\10\261\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\21\5\1\342\5\5"+
    "\6\0\3\5\32\207\1\266\2\207\1\10\40\207\32\267"+
    "\1\343\3\267\1\272\71\267\1\270\2\267\1\10\72\267"+
    "\1\343\3\267\1\272\1\344\36\267\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\7\5\1\345\17\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\13\5\1\346\13\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\347\1\0\2\5\23\0\27\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\13\5\1\350"+
    "\13\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\27\5\6\0\1\351\2\5\1\0\2\5"+
    "\4\0\1\352\1\0\2\5\23\0\27\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\11\5"+
    "\1\353\15\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\13\5\1\354\13\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\355\1\0\2\5\23\0\27\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\11\5\1\356\15\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\17\5\1\357\7\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\23\5\1\360\3\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\7\5\1\361\17\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\11\5\1\362\15\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\11\5\1\363\15\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\17\5\1\364\7\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\27\5\6\0\2\5"+
    "\1\365\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\4\5\1\366\22\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\6\5\1\367\20\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\11\5\1\370\15\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\7\5\1\371\17\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\23\5\1\372\3\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\14\5\1\373\12\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\10\5\1\374\16\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\14\5\1\375\12\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\6\5\1\376\20\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\377\1\0\2\5\23\0\27\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\12\5\1\u0100"+
    "\14\5\6\0\3\5\1\0\2\5\4\0\1\u0101\1\0"+
    "\2\5\23\0\27\5\6\0\3\5\3\260\2\207\17\260"+
    "\1\207\5\260\1\340\2\260\1\61\27\260\1\207\10\260"+
    "\3\261\2\267\17\261\1\267\5\261\1\341\2\261\1\61"+
    "\27\261\1\267\10\261\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\16\5\1\u0102\10\5\6\0\3\5\32\267"+
    "\1\343\2\267\1\0\72\267\1\343\3\267\1\272\1\u0103"+
    "\36\267\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\10\5\1\u0104\16\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\14\5\1\u0105\12\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\10\5\1\u0106\16\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\25\5\1\u0107\1\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\13\5\1\u0108\13\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\20\5\1\u0109\6\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\21\5\1\u010a\5\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\26\5\1\u010b\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\14\5"+
    "\1\u010c\12\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\21\5\1\u010d\5\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\21\5"+
    "\1\u010e\5\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\13\5\1\u010f\13\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\7\5"+
    "\1\u0110\17\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\6\5\1\u0111\20\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\u0112\1\0\2\5\23\0\27\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\10\5\1\u0113\16\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\11\5\1\u0114\15\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\23\5\1\u0115\3\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\6\5\1\u0116\20\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\u0117\1\0\2\5"+
    "\23\0\27\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\17\5\1\u0118\7\5\6\0\3\5"+
    "\32\267\1\343\3\267\1\272\1\267\1\u0119\35\267\1\0"+
    "\2\5\4\0\1\u011a\1\0\2\5\23\0\27\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\14\5\1\u011b\12\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\u011c\1\0\2\5\23\0\27\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\21\5\1\u011d"+
    "\5\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\13\5\1\u011e\13\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\10\5\1\u011f"+
    "\16\5\6\0\3\5\1\0\2\5\4\0\1\u0120\1\0"+
    "\2\5\23\0\27\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\5\1\0\2\5\23\0\4\5\1\u0121\22\5\6\0"+
    "\3\5\1\0\2\5\4\0\1\5\1\0\2\5\23\0"+
    "\10\5\1\u0122\16\5\6\0\3\5\1\0\2\5\4\0"+
    "\1\u0123\1\0\2\5\23\0\27\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\14\5\1\u0124"+
    "\12\5\6\0\3\5\1\0\2\5\4\0\1\5\1\0"+
    "\2\5\23\0\15\5\1\u0125\11\5\6\0\3\5\1\0"+
    "\2\5\4\0\1\5\1\0\2\5\23\0\22\5\1\u0126"+
    "\4\5\6\0\3\5\32\267\1\270\3\267\1\272\37\267"+
    "\1\0\2\5\4\0\1\u0127\1\0\2\5\23\0\27\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\10\5\1\u0128\16\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\u0129\1\0\2\5\23\0\27\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\21\5"+
    "\1\u012a\5\5\6\0\3\5\1\0\2\5\4\0\1\u012b"+
    "\1\0\2\5\23\0\27\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\14\5\1\u012c\12\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\21\5\1\u012d\5\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\21\5\1\u012e\5\5"+
    "\6\0\3\5\1\0\2\5\4\0\1\5\1\0\2\5"+
    "\23\0\16\5\1\u012f\10\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\u0130\1\0\2\5\23\0\27\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\15\5"+
    "\1\u0131\11\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\14\5\1\u0132\12\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\14\5"+
    "\1\u0133\12\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\7\5\1\u0134\17\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\20\5"+
    "\1\u0135\6\5\6\0\3\5\1\0\2\5\4\0\1\5"+
    "\1\0\2\5\23\0\17\5\1\u0136\7\5\6\0\3\5"+
    "\1\0\2\5\4\0\1\5\1\0\2\5\23\0\24\5"+
    "\1\u0137\2\5\6\0\3\5\1\0\2\5\4\0\1\u0138"+
    "\1\0\2\5\23\0\27\5\6\0\3\5\1\0\2\5"+
    "\4\0\1\5\1\0\2\5\23\0\16\5\1\u0139\10\5"+
    "\6\0\3\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13826];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\11\1\7\11\22\1\5\11"+
    "\3\1\2\11\2\1\2\0\2\11\3\1\16\11\1\1"+
    "\1\11\1\1\1\11\1\0\45\1\11\11\2\0\3\1"+
    "\1\11\1\1\1\11\2\0\54\1\1\11\3\0\1\1"+
    "\1\0\50\1\2\0\36\1\1\0\25\1\1\0\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private int contador; //CONTADOR DE TOKENS
  
  private void printError(String text, int line, int column){
  		System.out.println("Lexical Error on character: " + text + " at Line: " + line + " Column: " + column);
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador(java.io.Reader in) {
         contador = 0; 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analizador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 81: 
          { contador++; return new Yytoken(contador, null, sym.NULL, yyline + 1, yycolumn + 1);
          }
        case 113: break;
        case 28: 
          { contador ++; return new Yytoken(contador, null, sym.RBRACE, yyline+1, yycolumn+1);
          }
        case 114: break;
        case 101: 
          { contador++; return new Yytoken(contador, null, sym.PACKAGE, yyline + 1, yycolumn + 1);
          }
        case 115: break;
        case 11: 
          { contador++; return new Yytoken(contador, null, sym.MINUS, yyline + 1, yycolumn + 1);
          }
        case 116: break;
        case 68: 
          { contador++; return new Yytoken(contador, null, sym.TRY, yyline + 1, yycolumn + 1);
          }
        case 117: break;
        case 44: 
          { contador++; return new Yytoken(contador, null, sym.OROR, yyline + 1, yycolumn + 1);
          }
        case 118: break;
        case 16: 
          { yybegin(STRING); string.setLength(0);
          }
        case 119: break;
        case 109: 
          { contador ++; return new Yytoken(contador, null, sym.TRANSIENT, yyline+1, yycolumn+1);
          }
        case 120: break;
        case 74: 
          { contador ++; return new Yytoken(contador, null, sym.BYTE, yyline+1, yycolumn+1);
          }
        case 121: break;
        case 69: 
          { contador++; return new Yytoken(contador, null, sym.FOR, yyline + 1, yycolumn + 1);
          }
        case 122: break;
        case 3: 
          { contador++; return new Yytoken(contador, new Integer(yytext()), sym.INTEGER_LITERAL, yyline+1, yycolumn + 1);
          }
        case 123: break;
        case 73: 
          { contador++; return new Yytoken(contador, null, sym.URSHIFTEQ, yyline + 1, yycolumn + 1);
          }
        case 124: break;
        case 21: 
          { contador++; return new Yytoken(contador, null, sym.MULT, yyline + 1, yycolumn + 1);
          }
        case 125: break;
        case 14: 
          { contador ++; return new Yytoken(contador, null, sym.RBRACK, yyline+1, yycolumn+1);
          }
        case 126: break;
        case 97: 
          { contador++; return new Yytoken(contador, null, sym.SWITCH, yyline + 1, yycolumn + 1);
          }
        case 127: break;
        case 111: 
          { contador++; return new Yytoken(contador, null, sym.IMPLEMENTS, yyline + 1, yycolumn + 1);
          }
        case 128: break;
        case 5: 
          { contador ++; return new Yytoken(contador, null, sym.DOT, yyline+1, yycolumn+1);
          }
        case 129: break;
        case 45: 
          { contador++; return new Yytoken(contador, null, sym.OREQ, yyline + 1, yycolumn + 1);
          }
        case 130: break;
        case 19: 
          { contador ++; return new Yytoken(contador, null, sym.COMMA, yyline+1, yycolumn+1);
          }
        case 131: break;
        case 88: 
          { contador ++; return new Yytoken(contador, null, sym.FLOAT, yyline+1, yycolumn+1);
          }
        case 132: break;
        case 83: 
          { contador++; return new Yytoken(contador, null, sym.CLASS, yyline + 1, yycolumn + 1);
          }
        case 133: break;
        case 85: 
          { contador++; return new Yytoken(contador, null, sym.THROW, yyline + 1, yycolumn + 1);
          }
        case 134: break;
        case 76: 
          { contador++; return new Yytoken(contador, null, sym.CASE, yyline + 1, yycolumn + 1);
          }
        case 135: break;
        case 92: 
          { contador ++; return new Yytoken(contador, null, sym.PUBLIC, yyline+1, yycolumn+1);
          }
        case 136: break;
        case 46: 
          { contador++; return new Yytoken(contador, null, sym.EQEQ, yyline + 1, yycolumn + 1);
          }
        case 137: break;
        case 60: 
          { string.append( '\t' );
          }
        case 138: break;
        case 18: 
          { contador++; return new Yytoken(contador, null, sym.QUESTION, yyline + 1, yycolumn + 1);
          }
        case 139: break;
        case 71: 
          { contador++; return new Yytoken(contador, null, sym.ELSE, yyline + 1, yycolumn + 1);
          }
        case 140: break;
        case 25: 
          { contador ++; return new Yytoken(contador, null, sym.LPAREN, yyline+1, yycolumn+1);
          }
        case 141: break;
        case 66: 
          { contador++; return new Yytoken(contador, null, sym.LSHIFTEQ, yyline + 1, yycolumn + 1);
          }
        case 142: break;
        case 86: 
          { contador++; return new Yytoken(contador, null, sym.SUPER, yyline + 1, yycolumn + 1);
          }
        case 143: break;
        case 34: 
          { contador++; return new Yytoken(contador, new Double(yytext()), sym.FLOATING_POINT_LITERAL, yyline, yychar);
          }
        case 144: break;
        case 12: 
          { contador++; return new Yytoken(contador, null, sym.OR, yyline + 1, yycolumn + 1);
          }
        case 145: break;
        case 38: 
          { contador++; return new Yytoken(contador, null, sym.MODEQ, yyline + 1, yycolumn + 1);
          }
        case 146: break;
        case 77: 
          { contador ++; return new Yytoken(contador, null, sym.CHAR, yyline+1, yycolumn+1);
          }
        case 147: break;
        case 35: 
          { contador++; return new Yytoken(contador, null, sym.PLUSPLUS, yyline + 1, yycolumn + 1);
          }
        case 148: break;
        case 62: 
          { string.append( '\n' );
          }
        case 149: break;
        case 89: 
          { contador ++; return new Yytoken(contador, null, sym.FINAL, yyline+1, yycolumn+1);
          }
        case 150: break;
        case 6: 
          { contador++; return new Yytoken(contador, null, sym.PLUS, yyline + 1, yycolumn + 1);
          }
        case 151: break;
        case 39: 
          { contador++; return new Yytoken(contador, null, sym.XOREQ, yyline + 1, yycolumn + 1);
          }
        case 152: break;
        case 1: 
          { printError(yytext(), yyline, yychar);
          }
        case 153: break;
        case 20: 
          { contador++; return new Yytoken(contador, null, sym.EQ, yyline + 1, yycolumn + 1);
          }
        case 154: break;
        case 50: 
          { contador++; return new Yytoken(contador, null, sym.LTEQ, yyline + 1, yycolumn + 1);
          }
        case 155: break;
        case 105: 
          { contador++; return new Yytoken(contador, null, sym.CONTINUE, yyline + 1, yycolumn + 1);
          }
        case 156: break;
        case 37: 
          { contador++; return new Yytoken(contador, null, sym.NOTEQ, yyline + 1, yycolumn + 1);
          }
        case 157: break;
        case 24: 
          { contador++; return new Yytoken(contador, null, sym.DIV, yyline + 1, yycolumn + 1);
          }
        case 158: break;
        case 7: 
          { contador++; return new Yytoken(contador, null, sym.NOT, yyline + 1, yycolumn + 1);
          }
        case 159: break;
        case 100: 
          { contador ++; return new Yytoken(contador, null, sym.PRIVATE, yyline+1, yycolumn+1);
          }
        case 160: break;
        case 53: 
          { contador++; return new Yytoken(contador, null, sym.IF, yyline + 1, yycolumn + 1);
          }
        case 161: break;
        case 78: 
          { contador++; return new Yytoken(contador, null, sym.VOID, yyline + 1, yycolumn + 1);
          }
        case 162: break;
        case 72: 
          { contador ++; return new Yytoken(contador, null, sym.ENUM, yyline+1, yycolumn+1);
          }
        case 163: break;
        case 102: 
          { contador ++; return new Yytoken(contador, null, sym.BOOLEAN, yyline+1, yycolumn+1);
          }
        case 164: break;
        case 27: 
          { contador ++; return new Yytoken(contador, null, sym.LBRACE, yyline+1, yycolumn+1);
          }
        case 165: break;
        case 67: 
          { contador ++; return new Yytoken(contador, null, sym.INT, yyline+1, yycolumn+1);
          }
        case 166: break;
        case 36: 
          { contador++; return new Yytoken(contador, null, sym.PLUSEQ, yyline + 1, yycolumn + 1);
          }
        case 167: break;
        case 99: 
          { contador++; return new Yytoken(contador, null, sym.EXTENDS, yyline + 1, yycolumn + 1);
          }
        case 168: break;
        case 51: 
          { contador++; return new Yytoken(contador, null, sym.LSHIFT, yyline + 1, yycolumn + 1);
          }
        case 169: break;
        case 47: 
          { contador++; return new Yytoken(contador, null, sym.MULTEQ, yyline + 1, yycolumn + 1);
          }
        case 170: break;
        case 48: 
          { contador++; return new Yytoken(contador, null, sym.GTEQ, yyline + 1, yycolumn + 1);
          }
        case 171: break;
        case 107: 
          { contador ++; return new Yytoken(contador, null, sym.PROTECTED, yyline+1, yycolumn+1);
          }
        case 172: break;
        case 87: 
          { contador ++; return new Yytoken(contador, null, sym.SHORT, yyline+1, yycolumn+1);
          }
        case 173: break;
        case 55: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 174: break;
        case 29: 
          { contador ++; return new Yytoken(contador, null, sym.LBRACK, yyline+1, yycolumn+1);
          }
        case 175: break;
        case 43: 
          { contador++; return new Yytoken(contador, null, sym.MINUSEQ, yyline + 1, yycolumn + 1);
          }
        case 176: break;
        case 106: 
          { contador ++; return new Yytoken(contador, null, sym.ABSTRACT, yyline+1, yycolumn+1);
          }
        case 177: break;
        case 59: 
          { string.append( '\r' );
          }
        case 178: break;
        case 70: 
          { contador++; return new Yytoken(contador, null, sym.NEW, yyline + 1, yycolumn + 1);
          }
        case 179: break;
        case 52: 
          { contador++; return new Yytoken(contador, null, sym.DIVEQ, yyline + 1, yycolumn + 1);
          }
        case 180: break;
        case 58: 
          { string.append( '\b' );
          }
        case 181: break;
        case 10: 
          { contador++; return new Yytoken(contador, null, sym.AND, yyline + 1, yycolumn + 1);
          }
        case 182: break;
        case 104: 
          { contador++; return new Yytoken(contador, null, sym.FINALLY, yyline + 1, yycolumn + 1);
          }
        case 183: break;
        case 108: 
          { contador++; return new Yytoken(contador, null, sym.INTERFACE, yyline + 1, yycolumn + 1);
          }
        case 184: break;
        case 54: 
          { contador++; return new Yytoken(contador, null, sym.DO, yyline + 1, yycolumn + 1);
          }
        case 185: break;
        case 103: 
          { contador++; return new Yytoken(contador, null, sym.DEFAULT, yyline + 1, yycolumn + 1);
          }
        case 186: break;
        case 91: 
          { contador++; return new Yytoken(contador, null, sym.WHILE, yyline + 1, yycolumn + 1);
          }
        case 187: break;
        case 31: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 188: break;
        case 95: 
          { contador ++; return new Yytoken(contador, null, sym.DOUBLE, yyline+1, yycolumn+1);
          }
        case 189: break;
        case 56: 
          { string.append( '\"' );
          }
        case 190: break;
        case 32: 
          { yybegin(YYINITIAL); return new Yytoken(contador, string.toString(), sym.STRING_LITERAL, yyline+1, yycolumn + 1);
          }
        case 191: break;
        case 42: 
          { contador++; return new Yytoken(contador, null, sym.MINUSMINUS, yyline + 1, yycolumn + 1);
          }
        case 192: break;
        case 22: 
          { contador++; return new Yytoken(contador, null, sym.GT, yyline + 1, yycolumn + 1);
          }
        case 193: break;
        case 90: 
          { contador++; return new Yytoken(contador, false, sym.BOOLEAN_LITERAL, yyline + 1, yycolumn + 1);
          }
        case 194: break;
        case 40: 
          { contador++; return new Yytoken(contador, null, sym.ANDAND, yyline + 1, yycolumn + 1);
          }
        case 195: break;
        case 93: 
          { contador++; return new Yytoken(contador, null, sym.IMPORT, yyline + 1, yycolumn + 1);
          }
        case 196: break;
        case 57: 
          { string.append( '\'' );
          }
        case 197: break;
        case 79: 
          { contador++; return new Yytoken(contador, true, sym.BOOLEAN, yyline + 1, yycolumn + 1);
          }
        case 198: break;
        case 63: 
          { string.append( '\\' );
          }
        case 199: break;
        case 80: 
          { contador++; return new Yytoken(contador, null, sym.THIS, yyline + 1, yycolumn + 1);
          }
        case 200: break;
        case 17: 
          { contador++; return new Yytoken(contador, null, sym.COLON, yyline + 1, yycolumn + 1);
          }
        case 201: break;
        case 98: 
          { contador ++; return new Yytoken(contador, null, sym.NATIVE, yyline+1, yycolumn+1);
          }
        case 202: break;
        case 2: 
          { contador++; return new Yytoken(contador, yytext(), sym.IDENTIFIER, yyline+1, yycolumn + 1);
          }
        case 203: break;
        case 110: 
          { contador++; return new Yytoken(contador, null, sym.INSTANCEOF, yyline + 1, yycolumn + 1);
          }
        case 204: break;
        case 26: 
          { contador ++; return new Yytoken(contador, null, sym.RPAREN, yyline+1, yycolumn+1);
          }
        case 205: break;
        case 49: 
          { contador++; return new Yytoken(contador, null, sym.RSHIFT, yyline + 1, yycolumn + 1);
          }
        case 206: break;
        case 94: 
          { contador++; return new Yytoken(contador, null, sym.RETURN, yyline + 1, yycolumn + 1);
          }
        case 207: break;
        case 9: 
          { contador++; return new Yytoken(contador, null, sym.XOR, yyline + 1, yycolumn + 1);
          }
        case 208: break;
        case 61: 
          { string.append( '\f' );
          }
        case 209: break;
        case 75: 
          { contador ++; return new Yytoken(contador, null, sym.LONG, yyline+1, yycolumn+1);
          }
        case 210: break;
        case 96: 
          { contador ++; return new Yytoken(contador, null,sym.STATIC, yyline+1, yycolumn+1);
          }
        case 211: break;
        case 13: 
          { contador++; return new Yytoken(contador, null, sym.COMP, yyline + 1, yycolumn + 1);
          }
        case 212: break;
        case 15: 
          { contador ++; return new Yytoken(contador, null, sym.SEMICOLON, yyline+1, yycolumn+1);
          }
        case 213: break;
        case 30: 
          { string.append( yytext() );
          }
        case 214: break;
        case 112: 
          { contador ++; return new Yytoken(contador, null, sym.SYNCHRONIZED, yyline+1, yycolumn+1);
          }
        case 215: break;
        case 64: 
          { contador++; return new Yytoken(contador, null, sym.RSHIFTEQ, yyline + 1, yycolumn + 1);
          }
        case 216: break;
        case 65: 
          { contador++; return new Yytoken(contador, null, sym.URSHIFT, yyline + 1, yycolumn + 1);
          }
        case 217: break;
        case 82: 
          { contador++; return new Yytoken(contador, null, sym.BREAK, yyline + 1, yycolumn + 1);
          }
        case 218: break;
        case 84: 
          { contador++; return new Yytoken(contador, null, sym.CATCH, yyline + 1, yycolumn + 1);
          }
        case 219: break;
        case 33: 
          { contador++; return new Yytoken(contador, new Float(yytext().substring(0,yylength()-1)), sym.FLOATING_POINT_LITERAL, yyline+1, yycolumn + 1);
          }
        case 220: break;
        case 23: 
          { contador++; return new Yytoken(contador, null, sym.LT, yyline + 1, yycolumn + 1);
          }
        case 221: break;
        case 8: 
          { contador++; return new Yytoken(contador, null, sym.MOD, yyline + 1, yycolumn + 1);
          }
        case 222: break;
        case 41: 
          { contador++; return new Yytoken(contador, null, sym.ANDEQ, yyline + 1, yycolumn + 1);
          }
        case 223: break;
        case 4: 
          { 
          }
        case 224: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new Yytoken(contador, yytext(), sym.EOF, yyline, yycolumn);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Analizador <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Analizador scanner = null;
        try {
          scanner = new Analizador( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ){java_cup.runtime.Symbol s =  scanner.debug_next_token(); System.out.println(((Yytoken)s).toString());}
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
