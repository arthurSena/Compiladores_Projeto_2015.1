/* The following code was generated by JFlex 1.4.3 on 6/8/15 8:15 AM */

package lexico;

import java_cup.runtime.*;

//import static lexico.Simbolos.java


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/8/15 8:15 AM from the specification file
 * <tt>lexer.flex</tt>
 */
public class Analizador implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\0\1\5\1\3\22\0\1\5\1\13\1\22"+
    "\1\17\1\0\1\13\1\14\1\23\1\63\1\64\1\27\1\10\1\25"+
    "\1\15\1\6\1\32\1\2\11\2\1\24\1\67\1\31\1\26\1\30"+
    "\1\17\1\17\3\1\1\12\1\33\1\11\10\1\1\35\2\1\1\34"+
    "\1\61\7\1\1\20\1\0\1\21\1\13\1\17\1\17\1\46\1\40"+
    "\1\43\1\51\1\7\1\53\1\60\1\56\1\42\1\1\1\70\1\41"+
    "\1\62\1\54\1\50\1\36\1\1\1\44\1\52\1\47\1\37\1\45"+
    "\1\72\1\71\1\55\1\57\1\65\1\16\1\66\1\17\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\2\1\6"+
    "\5\7\1\10\1\11\1\7\1\6\1\12\5\6\16\2"+
    "\1\13\1\14\1\15\1\16\1\17\1\2\2\0\1\20"+
    "\1\21\3\2\1\0\1\6\1\0\1\4\7\2\1\22"+
    "\14\2\1\23\16\2\2\0\3\2\3\0\10\2\1\24"+
    "\14\2\1\25\14\2\1\26\1\27\4\2\1\30\1\24"+
    "\1\2\4\0\1\4\1\0\14\2\1\31\2\2\1\32"+
    "\1\2\1\33\1\2\1\34\12\2\1\35\3\2\3\0"+
    "\4\2\1\36\5\2\1\37\1\40\4\2\1\41\1\2"+
    "\1\42\3\2\1\43\1\44\1\2\1\45\1\2\1\0"+
    "\1\46\7\2\1\47\1\2\1\50\3\2\1\51\1\2"+
    "\1\52\1\2\1\53\1\54\1\0\1\55\1\2\1\56"+
    "\6\2\1\57\1\2\1\60\4\2\1\61\1\62\2\2"+
    "\1\63\1\64\2\2\1\65\1\2\1\66\1\67\2\2"+
    "\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\73\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\73\0\73\0\73"+
    "\0\u02c4\0\73\0\73\0\u01d8\0\u02ff\0\u033a\0\u0375\0\u03b0"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\73\0\73"+
    "\0\73\0\73\0\73\0\u0725\0\u0760\0\u079b\0\73\0\73"+
    "\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\166\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\166"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\166\0\166\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\166\0\166\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1c59\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6"+
    "\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\166"+
    "\0\u1fce\0\u2009\0\166\0\u2044\0\166\0\u207f\0\166\0\u20ba"+
    "\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292"+
    "\0\u22cd\0\166\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f"+
    "\0\u246a\0\u24a5\0\u24e0\0\u251b\0\166\0\u2556\0\u2591\0\u25cc"+
    "\0\u2607\0\u2642\0\166\0\166\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\166\0\u2769\0\166\0\u27a4\0\u27df\0\u281a\0\u2855\0\166"+
    "\0\u2890\0\166\0\u28cb\0\u2906\0\166\0\u2941\0\u297c\0\u29b7"+
    "\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\166\0\u2ade\0\166\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\166\0\u2bca\0\166\0\u2c05\0\166\0\166"+
    "\0\u2c40\0\166\0\u2c7b\0\166\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67"+
    "\0\u2da2\0\u2ddd\0\166\0\u2e18\0\166\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\166\0\166\0\u2f3f\0\u2f7a\0\166\0\166\0\u2fb5"+
    "\0\u2ff0\0\166\0\u302b\0\166\0\166\0\u3066\0\u30a1\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\2\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\2\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\3\1\31\1\3\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\3\1\42\1\43\1\44"+
    "\1\45\4\3\1\46\1\3\1\47\1\50\1\51\1\52"+
    "\1\53\2\3\1\54\74\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\30\3\5\0\3\3\2\0\1\4\3\0"+
    "\1\55\1\56\1\0\1\57\1\60\20\0\1\56\15\0"+
    "\1\60\1\0\1\57\23\0\1\6\70\0\1\55\71\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\6\3\1\61"+
    "\12\3\1\62\6\3\5\0\1\3\1\63\1\3\10\0"+
    "\1\22\15\0\1\22\72\0\1\22\60\0\1\22\1\0"+
    "\1\22\7\0\1\22\61\0\1\22\10\0\1\22\62\0"+
    "\1\22\7\0\1\22\62\0\1\64\102\0\2\22\71\0"+
    "\1\22\1\0\1\65\70\0\1\22\2\0\1\24\67\0"+
    "\1\22\1\66\2\0\1\67\41\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\4\3\1\70\4\3\1\71\1\3"+
    "\1\72\14\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\11\3\1\73\3\3\1\74\4\3"+
    "\1\75\5\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\15\3\1\76\12\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\20\3"+
    "\1\77\1\100\5\3\1\101\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\6\3\1\102\4\3"+
    "\1\103\1\3\1\104\5\3\1\105\4\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\106\1\0\2\3\20\0\30\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\15\3\1\107\12\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\5\3\1\110\22\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\11\3\1\111\11\3\1\112\4\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\113\1\0\2\3\20\0\15\3"+
    "\1\114\12\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\4\3\1\115\7\3\1\116\5\3"+
    "\1\117\1\120\4\3\5\0\2\3\1\121\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\6\3\1\122\1\123"+
    "\3\3\1\124\1\3\1\125\12\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\126\1\0\2\3\20\0\4\3\1\127"+
    "\6\3\1\130\14\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\2\3\20\0\14\3\1\131\13\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\2\3\20\0"+
    "\23\3\1\132\4\3\5\0\3\3\2\0\1\55\4\0"+
    "\1\56\1\0\1\57\1\60\20\0\1\56\15\0\1\60"+
    "\1\0\1\57\21\0\1\133\5\0\1\134\4\0\1\134"+
    "\56\0\2\3\4\0\1\3\1\0\2\3\20\0\17\3"+
    "\1\135\10\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\4\3\1\136\23\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\14\3"+
    "\1\137\13\3\5\0\3\3\23\0\1\140\75\0\1\22"+
    "\1\0\1\22\42\0\27\141\1\142\43\141\3\67\1\5"+
    "\1\6\66\67\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\5\3\1\143\22\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\7\3\1\144\5\3"+
    "\1\145\12\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\10\3\1\146\17\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\147\1\0\2\3\20\0\30\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\15\3\1\150\12\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\14\3\1\151\13\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\21\3\1\152\6\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\14\3\1\153\2\3"+
    "\1\154\10\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\3\3\1\155\24\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\13\3"+
    "\1\156\14\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\14\3\1\157\2\3\1\160\10\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\21\3\1\161\6\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\13\3\1\162\14\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\14\3\1\163\13\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\7\3\1\164\20\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\17\3\1\165\10\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\4\3\1\166\6\3"+
    "\1\167\6\3\1\170\5\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\7\3\1\171\1\3"+
    "\1\172\16\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\20\3\1\173\7\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\4\3"+
    "\1\174\23\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\3\3\1\175\24\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\13\3"+
    "\1\176\14\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\21\3\1\177\6\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\15\3"+
    "\1\200\12\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\7\3\1\201\20\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\15\3"+
    "\1\202\12\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\21\3\1\203\6\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\6\3"+
    "\1\204\21\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\11\3\1\205\16\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\30\3"+
    "\5\0\2\3\1\206\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\6\3\1\207\21\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\14\3\1\210"+
    "\13\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\11\3\1\211\16\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\7\3\1\212"+
    "\20\3\5\0\3\3\2\0\1\133\6\0\1\57\1\60"+
    "\36\0\1\60\1\0\1\57\21\0\1\133\71\0\2\3"+
    "\4\0\1\213\1\0\2\3\20\0\30\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\27\3"+
    "\1\214\5\0\3\3\1\0\2\3\4\0\1\215\1\0"+
    "\2\3\20\0\30\3\5\0\3\3\16\0\1\216\54\0"+
    "\27\141\1\217\43\141\27\220\1\221\2\220\1\222\1\223"+
    "\37\220\1\0\2\3\4\0\1\3\1\0\2\3\20\0"+
    "\6\3\1\224\21\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\2\3\20\0\12\3\1\225\15\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\2\3\20\0"+
    "\14\3\1\226\13\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\2\3\20\0\30\3\5\0\1\227\2\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\13\3"+
    "\1\230\14\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\6\3\1\231\21\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\214\1\0\2\3\20\0\30\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\25\3\1\214\2\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\232\1\0\2\3\20\0\30\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\14\3"+
    "\1\233\13\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\6\3\1\234\6\3\1\235\12\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\17\3\1\236\10\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\10\3\1\237\17\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\240\1\0\2\3"+
    "\20\0\30\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\14\3\1\241\13\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\11\3"+
    "\1\214\16\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\4\3\1\242\23\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\16\3"+
    "\1\243\11\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\14\3\1\244\13\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\245\1\0\2\3\20\0\30\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\21\3\1\246\6\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\17\3\1\247\10\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\15\3\1\250\12\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\13\3\1\251\14\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\5\3\1\252\22\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\253\1\0\2\3\20\0\30\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\14\3"+
    "\1\254\13\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\10\3\1\255\17\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\11\3"+
    "\1\256\16\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\14\3\1\257\13\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\13\3"+
    "\1\256\14\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\13\3\1\260\14\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\17\3"+
    "\1\261\10\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\6\3\1\262\21\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\7\3"+
    "\1\263\20\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\7\3\1\76\20\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\6\3"+
    "\1\264\21\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\21\3\1\265\6\3\5\0\3\3"+
    "\24\0\1\266\46\0\27\141\1\217\2\141\1\6\40\141"+
    "\27\220\1\267\3\220\1\223\66\220\1\221\2\220\1\6"+
    "\67\220\1\267\3\220\1\223\1\270\36\220\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\7\3\1\271\20\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\13\3\1\272\14\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\273\1\0\2\3\20\0\30\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\13\3"+
    "\1\274\14\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\30\3\5\0\1\275\2\3\1\0"+
    "\2\3\4\0\1\276\1\0\2\3\20\0\30\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\2\3\20\0"+
    "\11\3\1\277\16\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\2\3\20\0\13\3\1\300\14\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\301\1\0\2\3\20\0"+
    "\30\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\11\3\1\302\16\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\17\3\1\303"+
    "\10\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\23\3\1\304\4\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\7\3\1\305"+
    "\20\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\11\3\1\306\16\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\11\3\1\307"+
    "\16\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\17\3\1\310\10\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\30\3\5\0"+
    "\2\3\1\311\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\4\3\1\312\23\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\6\3\1\151\21\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\11\3\1\313\16\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\7\3\1\314\20\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\23\3\1\315\4\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\14\3\1\214\13\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\10\3\1\316\17\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\6\3\1\317\21\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\320\1\0\2\3"+
    "\20\0\30\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\12\3\1\321\15\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\322\1\0\2\3\20\0\30\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\16\3\1\323\11\3\5\0\3\3\16\0\1\16"+
    "\54\0\27\220\1\267\2\220\1\0\67\220\1\267\3\220"+
    "\1\223\1\324\36\220\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\10\3\1\325\17\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\14\3\1\326"+
    "\13\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\10\3\1\327\17\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\25\3\1\330"+
    "\2\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\13\3\1\331\14\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\20\3\1\332"+
    "\7\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\21\3\1\333\6\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\27\3\1\334"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\14\3\1\335\13\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\21\3\1\336\6\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\21\3\1\337\6\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\13\3\1\340\14\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\7\3\1\341\20\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\6\3\1\342\21\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\10\3\1\343\17\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\11\3\1\344\16\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\23\3\1\345\4\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\6\3\1\346\21\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\347\1\0\2\3"+
    "\20\0\30\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\17\3\1\350\10\3\5\0\3\3"+
    "\27\220\1\267\3\220\1\223\1\220\1\351\35\220\1\0"+
    "\2\3\4\0\1\352\1\0\2\3\20\0\30\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\2\3\20\0"+
    "\14\3\1\353\13\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\354\1\0\2\3\20\0\30\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\21\3\1\214"+
    "\6\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\13\3\1\355\14\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\10\3\1\356"+
    "\17\3\5\0\3\3\1\0\2\3\4\0\1\357\1\0"+
    "\2\3\20\0\30\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\2\3\20\0\4\3\1\360\23\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\2\3\20\0"+
    "\10\3\1\361\17\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\362\1\0\2\3\20\0\30\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\14\3\1\363"+
    "\13\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\2\3\20\0\15\3\1\364\12\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\2\3\20\0\22\3\1\365"+
    "\5\3\5\0\3\3\27\220\1\221\3\220\1\223\37\220"+
    "\1\0\2\3\4\0\1\366\1\0\2\3\20\0\30\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\10\3\1\367\17\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\370\1\0\2\3\20\0\30\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\21\3"+
    "\1\371\6\3\5\0\3\3\1\0\2\3\4\0\1\372"+
    "\1\0\2\3\20\0\30\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\14\3\1\373\13\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\21\3\1\374\6\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\21\3\1\375\6\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\2\3"+
    "\20\0\16\3\1\376\11\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\377\1\0\2\3\20\0\30\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\15\3"+
    "\1\u0100\12\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\14\3\1\u0101\13\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\14\3"+
    "\1\u0102\13\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\7\3\1\u0103\20\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\20\3"+
    "\1\u0104\7\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\2\3\20\0\17\3\1\u0105\10\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\2\3\20\0\24\3"+
    "\1\u0106\3\3\5\0\3\3\1\0\2\3\4\0\1\u0107"+
    "\1\0\2\3\20\0\30\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\2\3\20\0\16\3\1\u0108\11\3"+
    "\5\0\3\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\7\1\3\11\1\1\2\11"+
    "\23\1\5\11\1\1\2\0\2\11\3\1\1\0\1\1"+
    "\1\0\44\1\2\0\3\1\3\0\53\1\4\0\1\1"+
    "\1\0\42\1\3\0\33\1\1\0\24\1\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int contador; //CONTADOR DE TOKENS
  
  private void printError(String text, int line, int column){
  		System.out.println("Lexical Error on character: " + text + " at Line: " + line + " Column: " + column);
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador(java.io.Reader in) {
         contador = 0; 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analizador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.PUBLIC.ordinal(), yyline, yychar);
          }
        case 57: break;
        case 6: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.OPERATORS.ordinal(), yyline, yychar);
          }
        case 58: break;
        case 25: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CASE.ordinal(), yyline, yychar);
          }
        case 59: break;
        case 2: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ID.ordinal(), yyline, yychar);
          }
        case 60: break;
        case 45: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.PRIVATE.ordinal(), yyline, yychar);
          }
        case 61: break;
        case 5: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.POINT.ordinal(), yyline, yychar);
          }
        case 62: break;
        case 19: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DO.ordinal(), yyline, yychar);
          }
        case 63: break;
        case 31: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CLASS.ordinal(), yyline, yychar);
          }
        case 64: break;
        case 30: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.BREAK.ordinal(), yyline, yychar);
          }
        case 65: break;
        case 53: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.TRANSIENT.ordinal(), yyline, yychar);
          }
        case 66: break;
        case 50: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.ABSTRACT.ordinal(), yyline, yychar);
          }
        case 67: break;
        case 9: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.CloseBracket.ordinal(), yyline, yychar);
          }
        case 68: break;
        case 20: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.TYPE_SPECIFIER.ordinal(), yyline, yychar);
          }
        case 69: break;
        case 3: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INTEGER_LITERAL.ordinal(), yyline, yychar);
          }
        case 70: break;
        case 41: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.STATIC.ordinal(), yyline, yychar);
          }
        case 71: break;
        case 14: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.CloseCurlyBraces.ordinal(), yyline, yychar);
          }
        case 72: break;
        case 10: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.COMMA.ordinal(), yyline, yychar);
          }
        case 73: break;
        case 22: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FOR.ordinal(), yyline, yychar);
          }
        case 74: break;
        case 48: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FINALLY.ordinal(), yyline, yychar);
          }
        case 75: break;
        case 35: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.FINAL.ordinal(), yyline, yychar);
          }
        case 76: break;
        case 51: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.PROTECTED.ordinal(), yyline, yychar);
          }
        case 77: break;
        case 7: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SPECIAL_CHARACTER.ordinal(), yyline, yychar);
          }
        case 78: break;
        case 49: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CONTINUE.ordinal(), yyline, yychar);
          }
        case 79: break;
        case 16: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FLOATING_POINT_LITERAL.ordinal(), yyline, yychar);
          }
        case 80: break;
        case 18: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IF.ordinal(), yyline, yychar);
          }
        case 81: break;
        case 27: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRUE.ordinal(), yyline, yychar);
          }
        case 82: break;
        case 52: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INTERFACE.ordinal(), yyline, yychar);
          }
        case 83: break;
        case 13: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.OpenCurlyBraces.ordinal(), yyline, yychar);
          }
        case 84: break;
        case 28: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THIS.ordinal(), yyline, yychar);
          }
        case 85: break;
        case 46: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PACKAGE.ordinal(), yyline, yychar);
          }
        case 86: break;
        case 17: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DOUBLE_LITERAL.ordinal(), yyline, yychar);
          }
        case 87: break;
        case 42: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SWITCH.ordinal(), yyline, yychar);
          }
        case 88: break;
        case 26: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.VOID.ordinal(), yyline, yychar);
          }
        case 89: break;
        case 11: 
          { contador ++; return new Yytoken(contador, null, sym.LPAREN, yyline, yychar);
          }
        case 90: break;
        case 1: 
          { printError(yytext(), yyline, yychar);
          }
        case 91: break;
        case 44: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.EXTENDS.ordinal(), yyline, yychar);
          }
        case 92: break;
        case 24: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ELSE.ordinal(), yyline, yychar);
          }
        case 93: break;
        case 34: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SUPER.ordinal(), yyline, yychar);
          }
        case 94: break;
        case 15: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.SEMICOLON.ordinal(), yyline, yychar);
          }
        case 95: break;
        case 23: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NEW.ordinal(), yyline, yychar);
          }
        case 96: break;
        case 47: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DEFAULT.ordinal(), yyline, yychar);
          }
        case 97: break;
        case 33: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THROW.ordinal(), yyline, yychar);
          }
        case 98: break;
        case 56: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.SYNCHRONIZED.ordinal(), yyline, yychar);
          }
        case 99: break;
        case 36: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FALSE.ordinal(), yyline, yychar);
          }
        case 100: break;
        case 43: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.NATIVE.ordinal(), yyline, yychar);
          }
        case 101: break;
        case 39: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IMPORT.ordinal(), yyline, yychar);
          }
        case 102: break;
        case 37: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.WHILE.ordinal(), yyline, yychar);
          }
        case 103: break;
        case 55: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IMPLEMENTS.ordinal(), yyline, yychar);
          }
        case 104: break;
        case 21: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRY.ordinal(), yyline, yychar);
          }
        case 105: break;
        case 8: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.OpenBracket.ordinal(), yyline, yychar);
          }
        case 106: break;
        case 29: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NULL.ordinal(), yyline, yychar);
          }
        case 107: break;
        case 54: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INSTANCEOF.ordinal(), yyline, yychar);
          }
        case 108: break;
        case 40: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.RETURN.ordinal(), yyline, yychar);
          }
        case 109: break;
        case 32: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CATCH.ordinal(), yyline, yychar);
          }
        case 110: break;
        case 12: 
          { contador ++; return new Yytoken(contador, null, sym.RPAREN, yyline, yychar);
          }
        case 111: break;
        case 4: 
          { 
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new Yytoken(contador, yytext(), sym.EOF, yyline, yycolumn);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Analizador <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Analizador scanner = null;
        try {
          scanner = new Analizador( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
