/* The following code was generated by JFlex 1.4.3 on 6/7/15 10:09 AM */

package lexico;

//import java_cup.runtime.*;
//import static lexico.Simbolos.java


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/7/15 10:09 AM from the specification file
 * <tt>src/lexico/lexer.flex</tt>
 */
public class Analizador implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\0\1\5\1\3\22\0\1\5\1\12\1\21"+
    "\1\16\1\0\1\12\1\13\1\22\1\62\1\63\1\26\1\10\1\24"+
    "\1\14\1\6\1\31\1\2\11\2\1\23\1\66\1\30\1\25\1\27"+
    "\1\16\1\16\4\1\1\32\1\11\10\1\1\34\2\1\1\33\1\60"+
    "\7\1\1\17\1\0\1\20\1\12\1\16\1\16\1\45\1\37\1\42"+
    "\1\50\1\7\1\52\1\57\1\55\1\41\1\1\1\67\1\40\1\61"+
    "\1\53\1\47\1\35\1\1\1\43\1\51\1\46\1\36\1\44\1\71"+
    "\1\70\1\54\1\56\1\64\1\15\1\65\1\16\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\2\1\6"+
    "\5\7\1\10\1\11\1\7\1\6\1\12\5\6\16\2"+
    "\1\13\1\14\1\15\1\16\1\17\1\2\1\3\1\0"+
    "\1\20\3\2\1\0\1\6\1\0\1\4\7\2\1\21"+
    "\14\2\1\22\16\2\1\3\1\0\3\2\3\0\10\2"+
    "\1\23\14\2\1\24\14\2\1\25\1\26\4\2\1\27"+
    "\1\23\1\2\4\0\1\4\1\0\14\2\1\30\2\2"+
    "\1\31\1\2\1\32\1\2\1\33\12\2\1\34\3\2"+
    "\3\0\4\2\1\35\5\2\1\36\1\37\4\2\1\40"+
    "\1\2\1\41\3\2\1\42\1\43\1\2\1\44\1\2"+
    "\1\0\1\45\7\2\1\46\1\2\1\47\3\2\1\50"+
    "\1\2\1\51\1\2\1\52\1\53\1\0\1\54\1\2"+
    "\1\55\6\2\1\56\1\2\1\57\4\2\1\60\1\61"+
    "\2\2\1\62\1\63\2\2\1\64\1\2\1\65\1\66"+
    "\2\2\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\72\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\72\0\72\0\72"+
    "\0\u02b8\0\72\0\72\0\u01d0\0\u02f2\0\u032c\0\u0366\0\u03a0"+
    "\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570"+
    "\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\72\0\72"+
    "\0\72\0\72\0\72\0\u0706\0\u0740\0\u077a\0\72\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\164\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\164\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"+
    "\0\u199a\0\u19d4\0\u1a0e\0\164\0\164\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\164\0\164\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18"+
    "\0\u1bde\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\164\0\u1f44"+
    "\0\u1f7e\0\164\0\u1fb8\0\164\0\u1ff2\0\164\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\164\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc"+
    "\0\u2406\0\u2440\0\u247a\0\164\0\u24b4\0\u24ee\0\u2528\0\u2562"+
    "\0\u259c\0\164\0\164\0\u25d6\0\u2610\0\u264a\0\u2684\0\164"+
    "\0\u26be\0\164\0\u26f8\0\u2732\0\u276c\0\u27a6\0\164\0\u27e0"+
    "\0\164\0\u281a\0\u2854\0\164\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\164\0\u2a24\0\164\0\u2a5e\0\u2a98"+
    "\0\u2ad2\0\164\0\u2b0c\0\164\0\u2b46\0\164\0\164\0\u2b80"+
    "\0\164\0\u2bba\0\164\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc"+
    "\0\u2d16\0\164\0\u2d50\0\164\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38"+
    "\0\164\0\164\0\u2e72\0\u2eac\0\164\0\164\0\u2ee6\0\u2f20"+
    "\0\164\0\u2f5a\0\164\0\164\0\u2f94\0\u2fce\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\2\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\3\1\31\1\3\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\3\1\42\1\43\1\44"+
    "\1\45\4\3\1\46\1\3\1\47\1\50\1\51\1\52"+
    "\1\53\2\3\1\54\73\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\30\3\5\0\3\3\2\0\1\4\3\0"+
    "\1\55\1\56\1\0\1\57\20\0\1\56\17\0\1\57"+
    "\23\0\1\6\67\0\1\55\70\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\6\3\1\60\12\3\1\61\6\3"+
    "\5\0\1\3\1\62\1\3\10\0\1\22\14\0\1\22"+
    "\71\0\1\22\57\0\1\22\1\0\1\22\7\0\1\22"+
    "\60\0\1\22\10\0\1\22\61\0\1\22\7\0\1\22"+
    "\61\0\1\63\101\0\2\22\70\0\1\22\1\0\1\64"+
    "\67\0\1\22\2\0\1\24\66\0\1\22\1\65\2\0"+
    "\1\66\41\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\4\3\1\67\4\3\1\70\1\3\1\71\14\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\11\3\1\72\3\3\1\73\4\3\1\74\5\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\15\3\1\75\12\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\20\3\1\76\1\77\5\3"+
    "\1\100\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\6\3\1\101\4\3\1\102\1\3\1\103"+
    "\5\3\1\104\4\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\105\1\0\1\3\20\0\30\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\15\3\1\106"+
    "\12\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\5\3\1\107\22\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\11\3\1\110"+
    "\11\3\1\111\4\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\112\1\0\1\3\20\0\15\3\1\113\12\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\4\3\1\114\7\3\1\115\5\3\1\116\1\117\4\3"+
    "\5\0\2\3\1\120\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\6\3\1\121\1\122\3\3\1\123\1\3"+
    "\1\124\12\3\5\0\3\3\1\0\2\3\4\0\1\125"+
    "\1\0\1\3\20\0\4\3\1\126\6\3\1\127\14\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\14\3\1\130\13\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\23\3\1\131\4\3"+
    "\5\0\3\3\2\0\1\55\4\0\1\56\1\0\1\57"+
    "\20\0\1\56\17\0\1\57\21\0\1\132\5\0\1\133"+
    "\3\0\1\133\56\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\17\3\1\134\10\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\4\3\1\135\23\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\14\3\1\136\13\3\5\0\3\3\22\0\1\137"+
    "\74\0\1\22\1\0\1\22\42\0\26\140\1\141\43\140"+
    "\3\66\1\5\1\6\65\66\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\5\3\1\142\22\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\7\3"+
    "\1\143\5\3\1\144\12\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\10\3\1\145\17\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\146\1\0\1\3"+
    "\20\0\30\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\15\3\1\147\12\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\14\3"+
    "\1\150\13\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\21\3\1\151\6\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\14\3"+
    "\1\152\2\3\1\153\10\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\3\3\1\154\24\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\13\3\1\155\14\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\14\3\1\156\2\3"+
    "\1\157\10\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\21\3\1\160\6\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\13\3"+
    "\1\161\14\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\14\3\1\162\13\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\7\3"+
    "\1\163\20\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\17\3\1\164\10\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\4\3"+
    "\1\165\6\3\1\166\6\3\1\167\5\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\7\3"+
    "\1\170\1\3\1\171\16\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\20\3\1\172\7\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\4\3\1\173\23\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\3\3\1\174\24\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\13\3\1\175\14\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\21\3\1\176\6\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\15\3\1\177\12\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\7\3\1\200\20\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\15\3\1\201\12\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\21\3\1\202\6\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\6\3\1\203\21\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\11\3\1\204\16\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\30\3\5\0\2\3\1\205\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\6\3\1\206\21\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\14\3\1\207\13\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\11\3\1\210\16\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\7\3\1\211\20\3\5\0\3\3\2\0\1\132\6\0"+
    "\1\57\40\0\1\57\21\0\1\132\70\0\2\3\4\0"+
    "\1\212\1\0\1\3\20\0\30\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\27\3\1\213"+
    "\5\0\3\3\1\0\2\3\4\0\1\214\1\0\1\3"+
    "\20\0\30\3\5\0\3\3\15\0\1\215\54\0\26\140"+
    "\1\216\43\140\26\217\1\220\2\217\1\221\1\222\37\217"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\6\3"+
    "\1\223\21\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\12\3\1\224\15\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\14\3"+
    "\1\225\13\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\30\3\5\0\1\226\2\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\13\3\1\227"+
    "\14\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\6\3\1\230\21\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\213\1\0\1\3\20\0\30\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\25\3\1\213\2\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\231\1\0\1\3\20\0\30\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\14\3\1\232"+
    "\13\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\6\3\1\233\6\3\1\234\12\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\17\3\1\235\10\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\10\3\1\236\17\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\237\1\0\1\3\20\0"+
    "\30\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\14\3\1\240\13\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\11\3\1\213"+
    "\16\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\4\3\1\241\23\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\16\3\1\242"+
    "\11\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\14\3\1\243\13\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\244\1\0\1\3\20\0\30\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\21\3\1\245\6\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\17\3\1\246\10\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\15\3\1\247\12\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\13\3\1\250\14\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\5\3\1\251\22\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\252\1\0\1\3\20\0\30\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\14\3\1\253"+
    "\13\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\10\3\1\254\17\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\11\3\1\255"+
    "\16\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\14\3\1\256\13\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\13\3\1\255"+
    "\14\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\13\3\1\257\14\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\17\3\1\260"+
    "\10\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\6\3\1\261\21\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\7\3\1\262"+
    "\20\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\7\3\1\75\20\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\6\3\1\263"+
    "\21\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\21\3\1\264\6\3\5\0\3\3\23\0"+
    "\1\265\46\0\26\140\1\216\2\140\1\6\40\140\26\217"+
    "\1\266\3\217\1\222\65\217\1\220\2\217\1\6\66\217"+
    "\1\266\3\217\1\222\1\267\36\217\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\7\3\1\270\20\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\13\3\1\271\14\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\272\1\0\1\3\20\0\30\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\13\3\1\273"+
    "\14\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\30\3\5\0\1\274\2\3\1\0\2\3"+
    "\4\0\1\275\1\0\1\3\20\0\30\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\11\3"+
    "\1\276\16\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\13\3\1\277\14\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\300\1\0\1\3\20\0\30\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\11\3\1\301\16\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\17\3\1\302\10\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\23\3\1\303\4\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\7\3\1\304\20\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\11\3\1\305\16\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\11\3\1\306\16\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\17\3\1\307\10\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\30\3\5\0\2\3"+
    "\1\310\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\4\3\1\311\23\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\6\3\1\150\21\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\11\3\1\312\16\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\7\3\1\313\20\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\23\3\1\314\4\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\14\3\1\213\13\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\10\3\1\315\17\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\6\3\1\316\21\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\317\1\0\1\3\20\0"+
    "\30\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\12\3\1\320\15\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\321\1\0\1\3\20\0\30\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\16\3\1\322\11\3\5\0\3\3\15\0\1\16\54\0"+
    "\26\217\1\266\2\217\1\0\66\217\1\266\3\217\1\222"+
    "\1\323\36\217\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\10\3\1\324\17\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\14\3\1\325\13\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\10\3\1\326\17\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\25\3\1\327\2\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\13\3\1\330\14\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\20\3\1\331\7\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\21\3\1\332\6\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\27\3\1\333\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\14\3\1\334\13\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\21\3\1\335\6\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\21\3\1\336\6\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\13\3\1\337\14\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\7\3\1\340\20\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\6\3\1\341\21\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\10\3\1\342\17\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\11\3\1\343\16\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\23\3\1\344\4\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\6\3\1\345\21\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\346\1\0\1\3\20\0"+
    "\30\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\17\3\1\347\10\3\5\0\3\3\26\217"+
    "\1\266\3\217\1\222\1\217\1\350\35\217\1\0\2\3"+
    "\4\0\1\351\1\0\1\3\20\0\30\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\14\3"+
    "\1\352\13\3\5\0\3\3\1\0\2\3\4\0\1\353"+
    "\1\0\1\3\20\0\30\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\21\3\1\213\6\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\13\3\1\354\14\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\10\3\1\355\17\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\356\1\0\1\3"+
    "\20\0\30\3\5\0\3\3\1\0\2\3\4\0\1\3"+
    "\1\0\1\3\20\0\4\3\1\357\23\3\5\0\3\3"+
    "\1\0\2\3\4\0\1\3\1\0\1\3\20\0\10\3"+
    "\1\360\17\3\5\0\3\3\1\0\2\3\4\0\1\361"+
    "\1\0\1\3\20\0\30\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\14\3\1\362\13\3"+
    "\5\0\3\3\1\0\2\3\4\0\1\3\1\0\1\3"+
    "\20\0\15\3\1\363\12\3\5\0\3\3\1\0\2\3"+
    "\4\0\1\3\1\0\1\3\20\0\22\3\1\364\5\3"+
    "\5\0\3\3\26\217\1\220\3\217\1\222\37\217\1\0"+
    "\2\3\4\0\1\365\1\0\1\3\20\0\30\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\10\3\1\366\17\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\367\1\0\1\3\20\0\30\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\21\3\1\370"+
    "\6\3\5\0\3\3\1\0\2\3\4\0\1\371\1\0"+
    "\1\3\20\0\30\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\14\3\1\372\13\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\21\3\1\373\6\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\21\3\1\374\6\3\5\0"+
    "\3\3\1\0\2\3\4\0\1\3\1\0\1\3\20\0"+
    "\16\3\1\375\11\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\376\1\0\1\3\20\0\30\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\15\3\1\377"+
    "\12\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\14\3\1\u0100\13\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\14\3\1\u0101"+
    "\13\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\7\3\1\u0102\20\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\20\3\1\u0103"+
    "\7\3\5\0\3\3\1\0\2\3\4\0\1\3\1\0"+
    "\1\3\20\0\17\3\1\u0104\10\3\5\0\3\3\1\0"+
    "\2\3\4\0\1\3\1\0\1\3\20\0\24\3\1\u0105"+
    "\3\3\5\0\3\3\1\0\2\3\4\0\1\u0106\1\0"+
    "\1\3\20\0\30\3\5\0\3\3\1\0\2\3\4\0"+
    "\1\3\1\0\1\3\20\0\16\3\1\u0107\11\3\5\0"+
    "\3\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\7\1\3\11\1\1\2\11"+
    "\23\1\5\11\2\1\1\0\1\11\3\1\1\0\1\1"+
    "\1\0\45\1\1\0\3\1\3\0\53\1\4\0\1\1"+
    "\1\0\42\1\3\0\33\1\1\0\24\1\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int contador; //CONTADOR DE TOKENS
  
  private void printError(String text, int line, int column){
  		System.out.println("Lexical Error on character: " + text + "at Line: " + line + " Column: " + column);
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador(java.io.Reader in) {
         contador = 0; 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analizador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.PUBLIC.ordinal(), yyline, yychar);
          }
        case 56: break;
        case 6: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.OPERATORS.ordinal(), yyline, yychar);
          }
        case 57: break;
        case 24: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CASE.ordinal(), yyline, yychar);
          }
        case 58: break;
        case 2: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ID.ordinal(), yyline, yychar);
          }
        case 59: break;
        case 44: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.PRIVATE.ordinal(), yyline, yychar);
          }
        case 60: break;
        case 5: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.POINT.ordinal(), yyline, yychar);
          }
        case 61: break;
        case 18: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DO.ordinal(), yyline, yychar);
          }
        case 62: break;
        case 30: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CLASS.ordinal(), yyline, yychar);
          }
        case 63: break;
        case 29: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.BREAK.ordinal(), yyline, yychar);
          }
        case 64: break;
        case 52: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.TRANSIENT.ordinal(), yyline, yychar);
          }
        case 65: break;
        case 49: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.ABSTRACT.ordinal(), yyline, yychar);
          }
        case 66: break;
        case 9: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.CloseBracket.ordinal(), yyline, yychar);
          }
        case 67: break;
        case 19: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.TYPE_SPECIFIER.ordinal(), yyline, yychar);
          }
        case 68: break;
        case 40: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.STATIC.ordinal(), yyline, yychar);
          }
        case 69: break;
        case 14: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.CloseCurlyBraces.ordinal(), yyline, yychar);
          }
        case 70: break;
        case 10: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.COMMA.ordinal(), yyline, yychar);
          }
        case 71: break;
        case 12: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.ClosePar.ordinal(), yyline, yychar);
          }
        case 72: break;
        case 21: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FOR.ordinal(), yyline, yychar);
          }
        case 73: break;
        case 47: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FINALLY.ordinal(), yyline, yychar);
          }
        case 74: break;
        case 34: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.FINAL.ordinal(), yyline, yychar);
          }
        case 75: break;
        case 50: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.PROTECTED.ordinal(), yyline, yychar);
          }
        case 76: break;
        case 7: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SPECIAL_CHARACTER.ordinal(), yyline, yychar);
          }
        case 77: break;
        case 48: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CONTINUE.ordinal(), yyline, yychar);
          }
        case 78: break;
        case 16: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FLOATING_POINT_LITERAL.ordinal(), yyline, yychar);
          }
        case 79: break;
        case 17: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IF.ordinal(), yyline, yychar);
          }
        case 80: break;
        case 26: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRUE.ordinal(), yyline, yychar);
          }
        case 81: break;
        case 51: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INTERFACE.ordinal(), yyline, yychar);
          }
        case 82: break;
        case 13: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.OpenCurlyBraces.ordinal(), yyline, yychar);
          }
        case 83: break;
        case 27: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THIS.ordinal(), yyline, yychar);
          }
        case 84: break;
        case 45: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PACKAGE.ordinal(), yyline, yychar);
          }
        case 85: break;
        case 3: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DOUBLE_LITERAL.ordinal(), yyline, yychar);
          }
        case 86: break;
        case 41: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SWITCH.ordinal(), yyline, yychar);
          }
        case 87: break;
        case 25: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.VOID.ordinal(), yyline, yychar);
          }
        case 88: break;
        case 1: 
          { printError(yytext(), yyline, yychar);
          }
        case 89: break;
        case 43: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.EXTENDS.ordinal(), yyline, yychar);
          }
        case 90: break;
        case 23: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ELSE.ordinal(), yyline, yychar);
          }
        case 91: break;
        case 33: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SUPER.ordinal(), yyline, yychar);
          }
        case 92: break;
        case 15: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.SEMICOLON.ordinal(), yyline, yychar);
          }
        case 93: break;
        case 22: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NEW.ordinal(), yyline, yychar);
          }
        case 94: break;
        case 46: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DEFAULT.ordinal(), yyline, yychar);
          }
        case 95: break;
        case 32: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THROW.ordinal(), yyline, yychar);
          }
        case 96: break;
        case 55: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.SYNCHRONIZED.ordinal(), yyline, yychar);
          }
        case 97: break;
        case 35: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FALSE.ordinal(), yyline, yychar);
          }
        case 98: break;
        case 42: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.NATIVE.ordinal(), yyline, yychar);
          }
        case 99: break;
        case 38: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IMPORT.ordinal(), yyline, yychar);
          }
        case 100: break;
        case 36: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.WHILE.ordinal(), yyline, yychar);
          }
        case 101: break;
        case 54: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IMPLEMENTS.ordinal(), yyline, yychar);
          }
        case 102: break;
        case 20: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRY.ordinal(), yyline, yychar);
          }
        case 103: break;
        case 8: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.OpenBracket.ordinal(), yyline, yychar);
          }
        case 104: break;
        case 28: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NULL.ordinal(), yyline, yychar);
          }
        case 105: break;
        case 53: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INSTANCEOF.ordinal(), yyline, yychar);
          }
        case 106: break;
        case 11: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.OpenPar.ordinal(), yyline, yychar);
          }
        case 107: break;
        case 39: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.RETURN.ordinal(), yyline, yychar);
          }
        case 108: break;
        case 31: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CATCH.ordinal(), yyline, yychar);
          }
        case 109: break;
        case 4: 
          { 
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
