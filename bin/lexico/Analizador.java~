/* The following code was generated by JFlex 1.4.3 on 6/4/15 12:05 PM */

package lexico;

//import java_cup.runtime.Symbol;
//import static lexico.Simbolos.java


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/4/15 12:05 PM from the specification file
 * <tt>lexer.flex</tt>
 */
class Analizador {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\35\2\0\1\35\22\0\1\35\17\0\12\2\7\0"+
    "\32\1\6\0\1\13\1\7\1\12\1\25\1\20\1\26\1\31\1\24"+
    "\1\11\1\1\1\22\1\10\1\30\1\21\1\17\1\5\1\1\1\16"+
    "\1\14\1\15\1\6\1\32\1\33\1\27\1\23\1\34\1\3\1\0"+
    "\1\4\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\16\2\1\5\10\2"+
    "\1\6\23\2\1\7\17\2\1\10\16\2\1\11\7\2"+
    "\1\12\5\2\1\13\7\2\1\14\1\15\5\2\1\16"+
    "\2\2\1\17\6\2\1\20\1\2\1\21\3\2\1\22"+
    "\1\2\1\23\13\2\1\24\5\2\1\25\1\26\2\2"+
    "\1\27\2\2\1\30\2\2\1\31\6\2\1\32\1\33"+
    "\1\34\1\35\1\36\7\2\1\37\2\2\1\40\1\2"+
    "\1\41\2\2\1\42\1\2\1\43\1\44\2\2\1\45"+
    "\1\46\1\2\1\47\10\2\1\50\1\51\1\52\4\2"+
    "\1\53\1\54\3\2\1\55\1\2\1\56\2\2\1\57"+
    "\1\2\1\60\1\61\1\2\1\62\1\2\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\36\0\36\0\132\0\170\0\226"+
    "\0\264\0\322\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186"+
    "\0\u01a4\0\u01c2\0\u01e0\0\36\0\u01fe\0\u021c\0\u023a\0\u0258"+
    "\0\u0276\0\u0294\0\u02b2\0\u02d0\0\74\0\u02ee\0\u030c\0\u032a"+
    "\0\u0348\0\u0366\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a"+
    "\0\u0438\0\u0456\0\u0474\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a"+
    "\0\u0528\0\u0546\0\u0564\0\u0582\0\u05a0\0\u05be\0\u05dc\0\u05fa"+
    "\0\u0618\0\u0636\0\u0654\0\u0672\0\u0690\0\u06ae\0\u06cc\0\u06ea"+
    "\0\u0708\0\u0726\0\u0744\0\u0762\0\u0780\0\u079e\0\u07bc\0\u07da"+
    "\0\u07f8\0\u0816\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac\0\74"+
    "\0\u08ca\0\u08e8\0\u0906\0\u0924\0\u0942\0\u0960\0\u097e\0\74"+
    "\0\u099c\0\u09ba\0\u09d8\0\u09f6\0\u0a14\0\74\0\u0a32\0\u0a50"+
    "\0\u0a6e\0\u0a8c\0\u0aaa\0\u0ac8\0\u0ae6\0\74\0\74\0\u0b04"+
    "\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\74\0\u0b9a\0\u0bb8\0\74"+
    "\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c\0\74\0\u0c8a"+
    "\0\74\0\u0ca8\0\u0cc6\0\u0ce4\0\74\0\u0d02\0\74\0\u0d20"+
    "\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98\0\u0db6\0\u0dd4\0\u0df2\0\u0e10"+
    "\0\u0e2e\0\u0e4c\0\74\0\u0e6a\0\u0e88\0\u0ea6\0\u0ec4\0\u0ee2"+
    "\0\74\0\74\0\u0f00\0\u0f1e\0\74\0\u0f3c\0\u0f5a\0\74"+
    "\0\u0f78\0\u0f96\0\74\0\u0fb4\0\u0fd2\0\u0ff0\0\u100e\0\u102c"+
    "\0\u104a\0\74\0\u1068\0\74\0\74\0\74\0\u1086\0\u10a4"+
    "\0\u10c2\0\u10e0\0\u10fe\0\u111c\0\u113a\0\74\0\u1158\0\u1176"+
    "\0\74\0\u1194\0\74\0\u11b2\0\u11d0\0\74\0\u11ee\0\74"+
    "\0\74\0\u120c\0\u122a\0\74\0\74\0\u1248\0\74\0\u1266"+
    "\0\u1284\0\u12a2\0\u12c0\0\u12de\0\u12fc\0\u131a\0\u1338\0\74"+
    "\0\74\0\74\0\u1356\0\u1374\0\u1392\0\u13b0\0\74\0\74"+
    "\0\u13ce\0\u13ec\0\u140a\0\74\0\u1428\0\74\0\u1446\0\u1464"+
    "\0\74\0\u1482\0\74\0\74\0\u14a0\0\74\0\u14be\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\3\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\3"+
    "\1\17\1\20\3\3\1\21\1\22\4\3\1\23\1\3"+
    "\1\24\37\0\2\3\2\0\30\3\2\0\2\3\2\0"+
    "\1\3\1\25\4\3\1\26\2\3\1\27\16\3\2\0"+
    "\2\3\2\0\11\3\1\30\1\31\3\3\1\32\11\3"+
    "\2\0\2\3\2\0\12\3\1\33\15\3\2\0\2\3"+
    "\2\0\14\3\1\34\4\3\1\35\1\3\1\36\4\3"+
    "\2\0\2\3\2\0\3\3\1\37\2\3\1\40\3\3"+
    "\1\41\4\3\1\42\10\3\2\0\2\3\2\0\2\3"+
    "\1\43\25\3\2\0\2\3\2\0\1\3\1\44\6\3"+
    "\1\45\5\3\1\46\1\47\6\3\1\50\1\3\2\0"+
    "\2\3\2\0\11\3\1\51\5\3\1\52\10\3\2\0"+
    "\2\3\2\0\13\3\1\53\14\3\2\0\2\3\2\0"+
    "\3\3\1\54\16\3\1\55\5\3\2\0\2\3\2\0"+
    "\1\3\1\56\4\3\1\57\4\3\1\60\14\3\2\0"+
    "\2\3\2\0\12\3\1\61\1\62\14\3\2\0\2\3"+
    "\2\0\3\3\1\63\1\64\1\3\1\65\3\3\1\66"+
    "\15\3\2\0\2\3\2\0\17\3\1\67\10\3\2\0"+
    "\2\3\2\0\2\3\1\70\25\3\2\0\2\3\2\0"+
    "\5\3\1\71\22\3\2\0\2\3\2\0\4\3\1\72"+
    "\5\3\1\73\15\3\2\0\2\3\2\0\13\3\1\74"+
    "\14\3\2\0\2\3\2\0\12\3\1\75\15\3\2\0"+
    "\2\3\2\0\10\3\1\76\17\3\2\0\2\3\2\0"+
    "\14\3\1\77\13\3\2\0\2\3\2\0\7\3\1\100"+
    "\1\101\17\3\2\0\2\3\2\0\1\102\27\3\2\0"+
    "\2\3\2\0\6\3\1\103\21\3\2\0\2\3\2\0"+
    "\7\3\1\104\1\105\17\3\2\0\2\3\2\0\14\3"+
    "\1\106\13\3\2\0\2\3\2\0\6\3\1\107\21\3"+
    "\2\0\2\3\2\0\7\3\1\110\20\3\2\0\2\3"+
    "\2\0\1\111\27\3\2\0\2\3\2\0\6\3\1\112"+
    "\21\3\2\0\2\3\2\0\14\3\1\113\13\3\2\0"+
    "\2\3\2\0\12\3\1\114\15\3\2\0\2\3\2\0"+
    "\4\3\1\115\23\3\2\0\2\3\2\0\1\3\1\116"+
    "\4\3\1\117\7\3\1\120\11\3\2\0\2\3\2\0"+
    "\4\3\1\121\4\3\1\122\16\3\2\0\2\3\2\0"+
    "\10\3\1\123\17\3\2\0\2\3\2\0\7\3\1\124"+
    "\20\3\2\0\2\3\2\0\10\3\1\125\17\3\2\0"+
    "\2\3\2\0\3\3\1\126\24\3\2\0\2\3\2\0"+
    "\10\3\1\127\17\3\2\0\2\3\2\0\26\3\1\130"+
    "\1\3\2\0\2\3\2\0\1\3\1\131\26\3\2\0"+
    "\2\3\2\0\21\3\1\132\6\3\2\0\2\3\2\0"+
    "\12\3\1\133\15\3\2\0\2\3\2\0\14\3\1\134"+
    "\13\3\2\0\2\3\2\0\3\3\1\135\24\3\2\0"+
    "\2\3\2\0\11\3\1\136\16\3\2\0\2\3\2\0"+
    "\4\3\1\137\23\3\2\0\2\3\2\0\3\3\1\140"+
    "\24\3\2\0\2\3\2\0\15\3\1\141\12\3\2\0"+
    "\2\3\2\0\25\3\1\142\2\3\2\0\2\3\2\0"+
    "\10\3\1\143\17\3\2\0\2\3\2\0\6\3\1\144"+
    "\21\3\2\0\2\3\2\0\3\3\1\145\24\3\2\0"+
    "\2\3\2\0\13\3\1\146\14\3\2\0\2\3\2\0"+
    "\24\3\1\147\3\3\2\0\2\3\2\0\10\3\1\150"+
    "\17\3\2\0\2\3\2\0\13\3\1\151\14\3\2\0"+
    "\2\3\2\0\3\3\1\152\6\3\1\153\15\3\2\0"+
    "\2\3\2\0\7\3\1\154\20\3\2\0\2\3\2\0"+
    "\13\3\1\155\14\3\2\0\2\3\2\0\5\3\1\156"+
    "\22\3\2\0\2\3\2\0\10\3\1\157\17\3\2\0"+
    "\2\3\2\0\11\3\1\160\16\3\2\0\2\3\2\0"+
    "\10\3\1\161\17\3\2\0\2\3\2\0\13\3\1\162"+
    "\14\3\2\0\2\3\2\0\10\3\1\163\17\3\2\0"+
    "\2\3\2\0\5\3\1\164\22\3\2\0\2\3\2\0"+
    "\11\3\1\165\16\3\2\0\2\3\2\0\10\3\1\166"+
    "\17\3\2\0\2\3\2\0\13\3\1\167\14\3\2\0"+
    "\2\3\2\0\14\3\1\170\13\3\2\0\2\3\2\0"+
    "\7\3\1\171\20\3\2\0\2\3\2\0\12\3\1\172"+
    "\1\173\14\3\2\0\2\3\2\0\1\3\1\174\26\3"+
    "\2\0\2\3\2\0\13\3\1\175\14\3\2\0\2\3"+
    "\2\0\13\3\1\176\14\3\2\0\2\3\2\0\3\3"+
    "\1\177\24\3\2\0\2\3\2\0\4\3\1\200\23\3"+
    "\2\0\2\3\2\0\2\3\1\201\25\3\2\0\2\3"+
    "\2\0\6\3\1\202\21\3\2\0\2\3\2\0\6\3"+
    "\1\203\21\3\2\0\2\3\2\0\6\3\1\204\21\3"+
    "\2\0\2\3\2\0\7\3\1\205\20\3\2\0\2\3"+
    "\2\0\3\3\1\206\24\3\2\0\2\3\2\0\4\3"+
    "\1\207\23\3\2\0\2\3\2\0\6\3\1\210\21\3"+
    "\2\0\2\3\2\0\6\3\1\211\21\3\2\0\2\3"+
    "\2\0\13\3\1\212\14\3\2\0\2\3\2\0\15\3"+
    "\1\213\12\3\2\0\2\3\2\0\13\3\1\214\14\3"+
    "\2\0\2\3\2\0\6\3\1\215\21\3\2\0\2\3"+
    "\2\0\11\3\1\216\16\3\2\0\2\3\2\0\13\3"+
    "\1\217\14\3\2\0\2\3\2\0\11\3\1\220\16\3"+
    "\2\0\2\3\2\0\7\3\1\221\20\3\2\0\2\3"+
    "\2\0\17\3\1\222\10\3\2\0\2\3\2\0\4\3"+
    "\1\223\23\3\2\0\2\3\2\0\11\3\1\224\16\3"+
    "\2\0\2\3\2\0\11\3\1\225\16\3\2\0\2\3"+
    "\2\0\4\3\1\226\23\3\2\0\2\3\2\0\17\3"+
    "\1\227\10\3\2\0\2\3\2\0\10\3\1\230\17\3"+
    "\2\0\2\3\2\0\5\3\1\231\22\3\2\0\2\3"+
    "\2\0\7\3\1\232\20\3\2\0\2\3\2\0\26\3"+
    "\1\233\1\3\2\0\2\3\2\0\6\3\1\234\21\3"+
    "\2\0\2\3\2\0\11\3\1\235\16\3\2\0\2\3"+
    "\2\0\14\3\1\236\13\3\2\0\2\3\2\0\25\3"+
    "\1\237\2\3\2\0\2\3\2\0\3\3\1\240\24\3"+
    "\2\0\2\3\2\0\1\3\1\241\26\3\2\0\2\3"+
    "\2\0\10\3\1\242\17\3\2\0\2\3\2\0\3\3"+
    "\1\243\24\3\2\0\2\3\2\0\13\3\1\244\14\3"+
    "\2\0\2\3\2\0\13\3\1\245\14\3\2\0\2\3"+
    "\2\0\5\3\1\246\22\3\2\0\2\3\2\0\24\3"+
    "\1\247\3\3\2\0\2\3\2\0\10\3\1\250\17\3"+
    "\2\0\2\3\2\0\5\3\1\251\22\3\2\0\2\3"+
    "\2\0\6\3\1\252\21\3\2\0\2\3\2\0\14\3"+
    "\1\253\13\3\2\0\2\3\2\0\21\3\1\254\6\3"+
    "\2\0\2\3\2\0\23\3\1\255\4\3\2\0\2\3"+
    "\2\0\10\3\1\256\17\3\2\0\2\3\2\0\14\3"+
    "\1\257\13\3\2\0\2\3\2\0\6\3\1\260\21\3"+
    "\2\0\2\3\2\0\5\3\1\261\22\3\2\0\2\3"+
    "\2\0\11\3\1\262\16\3\2\0\2\3\2\0\17\3"+
    "\1\263\10\3\2\0\2\3\2\0\4\3\1\264\23\3"+
    "\2\0\2\3\2\0\20\3\1\265\7\3\2\0\2\3"+
    "\2\0\14\3\1\266\13\3\2\0\2\3\2\0\20\3"+
    "\1\267\7\3\2\0\2\3\2\0\13\3\1\270\14\3"+
    "\2\0\2\3\2\0\13\3\1\271\14\3\2\0\2\3"+
    "\2\0\3\3\1\272\24\3\2\0\2\3\2\0\3\3"+
    "\1\273\24\3\2\0\2\3\2\0\13\3\1\274\14\3"+
    "\2\0\2\3\2\0\13\3\1\275\14\3\2\0\2\3"+
    "\2\0\10\3\1\276\17\3\2\0\2\3\2\0\14\3"+
    "\1\277\13\3\2\0\2\3\2\0\5\3\1\300\22\3"+
    "\2\0\2\3\2\0\6\3\1\301\21\3\2\0\2\3"+
    "\2\0\13\3\1\302\14\3\2\0\2\3\2\0\1\3"+
    "\1\303\26\3\2\0\2\3\2\0\5\3\1\304\22\3"+
    "\2\0\2\3\2\0\12\3\1\305\15\3\2\0\2\3"+
    "\2\0\13\3\1\306\14\3\2\0\2\3\2\0\7\3"+
    "\1\307\20\3\2\0\2\3\2\0\7\3\1\310\20\3"+
    "\2\0\2\3\2\0\10\3\1\311\17\3\2\0\2\3"+
    "\2\0\16\3\1\312\11\3\2\0\2\3\2\0\13\3"+
    "\1\313\14\3\2\0\2\3\2\0\13\3\1\314\14\3"+
    "\2\0\2\3\2\0\5\3\1\315\22\3\2\0\2\3"+
    "\2\0\14\3\1\316\13\3\2\0\2\3\2\0\13\3"+
    "\1\317\14\3\2\0\2\3\2\0\10\3\1\320\17\3"+
    "\2\0\2\3\2\0\14\3\1\321\13\3\2\0\2\3"+
    "\2\0\14\3\1\322\13\3\2\0\2\3\2\0\6\3"+
    "\1\323\21\3\2\0\2\3\2\0\20\3\1\324\7\3"+
    "\2\0\2\3\2\0\12\3\1\325\15\3\2\0\2\3"+
    "\2\0\13\3\1\326\14\3\2\0\2\3\2\0\10\3"+
    "\1\327\17\3\2\0\2\3\2\0\4\3\1\330\23\3"+
    "\2\0\2\3\2\0\10\3\1\331\17\3\2\0\2\3"+
    "\2\0\21\3\1\332\6\3\2\0\2\3\2\0\21\3"+
    "\1\333\6\3\2\0\2\3\2\0\7\3\1\334\20\3"+
    "\2\0\2\3\2\0\27\3\1\335\2\0\2\3\2\0"+
    "\13\3\1\336\14\3\2\0\2\3\2\0\13\3\1\337"+
    "\14\3\2\0\2\3\2\0\20\3\1\340\7\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\16\1\1\11\314\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[224];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int contador; 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Analizador(java.io.Reader in) {
         contador = 0; 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Analizador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 84) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CATCH.toString(), yyline, yychar);
          }
        case 52: break;
        case 33: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SWITCH.toString(), yyline, yychar);
          }
        case 53: break;
        case 31: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IMPORT.toString(), yyline, yychar);
          }
        case 54: break;
        case 41: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DEFAULT.toString(), yyline, yychar);
          }
        case 55: break;
        case 19: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NULL.toString(), yyline, yychar);
          }
        case 56: break;
        case 21: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CLASS.toString(), yyline, yychar);
          }
        case 57: break;
        case 2: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ID.toString(), yyline, yychar);
          }
        case 58: break;
        case 48: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INSTANCEOF.toString(), yyline, yychar);
          }
        case 59: break;
        case 12: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.BYTE.toString(), yyline, yychar);
          }
        case 60: break;
        case 17: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THIS.toString(), yyline, yychar);
          }
        case 61: break;
        case 45: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PROTECTED.toString(), yyline, yychar);
          }
        case 62: break;
        case 7: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DO.toString(), yyline, yychar);
          }
        case 63: break;
        case 10: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NEW.toString(), yyline, yychar);
          }
        case 64: break;
        case 4: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.CloseBracket.toString(), yyline, yychar);
          }
        case 65: break;
        case 26: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FLOAT.toString(), yyline, yychar);
          }
        case 66: break;
        case 30: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PUBLIC.toString(), yyline, yychar);
          }
        case 67: break;
        case 50: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THREADSAFE.toString(), yyline, yychar);
          }
        case 68: break;
        case 24: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SHORT.toString(), yyline, yychar);
          }
        case 69: break;
        case 14: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CASE.toString(), yyline, yychar);
          }
        case 70: break;
        case 20: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.BREAK.toString(), yyline, yychar);
          }
        case 71: break;
        case 25: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.THROW.toString(), yyline, yychar);
          }
        case 72: break;
        case 13: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.LONG.toString(), yyline, yychar);
          }
        case 73: break;
        case 36: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.DOUBLE.toString(), yyline, yychar);
          }
        case 74: break;
        case 44: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ABSTRACT.toString(), yyline, yychar);
          }
        case 75: break;
        case 43: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CONTINUE.toString(), yyline, yychar);
          }
        case 76: break;
        case 35: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.NATIVE.toString(), yyline, yychar);
          }
        case 77: break;
        case 39: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.BOOLEAN.toString(), yyline, yychar);
          }
        case 78: break;
        case 8: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INT.toString(), yyline, yychar);
          }
        case 79: break;
        case 15: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.CHAR.toString(), yyline, yychar);
          }
        case 80: break;
        case 11: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FOR.toString(), yyline, yychar);
          }
        case 81: break;
        case 1: 
          { return new Yytoken(contador, yytext(), Simbolos.ERRO.toString(), yyline, yychar);
          }
        case 82: break;
        case 38: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PRIVATE.toString(), yyline, yychar);
          }
        case 83: break;
        case 18: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.ELSE.toString(), yyline, yychar);
          }
        case 84: break;
        case 34: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.RETURN.toString(), yyline, yychar);
          }
        case 85: break;
        case 46: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.INTERFACE.toString(), yyline, yychar);
          }
        case 86: break;
        case 29: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.WHILE.toString(), yyline, yychar);
          }
        case 87: break;
        case 37: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.PACKAGE.toString(), yyline, yychar);
          }
        case 88: break;
        case 16: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRUE.toString(), yyline, yychar);
          }
        case 89: break;
        case 3: 
          { contador ++; return new Yytoken(contador, yytext(), Simbolos.OpenBracket.toString(), yyline, yychar);
          }
        case 90: break;
        case 23: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SUPER.toString(), yyline, yychar);
          }
        case 91: break;
        case 9: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRY.toString(), yyline, yychar);
          }
        case 92: break;
        case 47: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.TRANSIENT.toString(), yyline, yychar);
          }
        case 93: break;
        case 42: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FINALLY.toString(), yyline, yychar);
          }
        case 94: break;
        case 28: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FALSE.toString(), yyline, yychar);
          }
        case 95: break;
        case 40: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.EXTENDS.toString(), yyline, yychar);
          }
        case 96: break;
        case 6: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IF.toString(), yyline, yychar);
          }
        case 97: break;
        case 49: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.IMPLEMENTS.toString(), yyline, yychar);
          }
        case 98: break;
        case 32: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.STATIC.toString(), yyline, yychar);
          }
        case 99: break;
        case 27: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.FINAL.toString(), yyline, yychar);
          }
        case 100: break;
        case 51: 
          { contador++; return new Yytoken(contador, yytext(), Simbolos.SYNCHRONIZED.toString(), yyline, yychar);
          }
        case 101: break;
        case 5: 
          { 
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
